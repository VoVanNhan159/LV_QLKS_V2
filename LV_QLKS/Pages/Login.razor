@page "/login"
@using LV_QLKS.Service
@using ShareModel

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<section class="">
  <div class="container-fluid h-custom">
    <div class="row">
      <div class="col col-lg-6">
        <img src="/home/images/background/signin-signup.webp" alt="Sample image">
      </div>
      <div class="col col-lg-6">
          <!-- Email input -->
          <div class="form-outline mb-4">
              <label class="form-label" for="form3Example3">Tên đăng nhập</label>
            <RadzenTextBox @bind-Value="acc.AccountUsername" Name="AccountUsername" style="display: block" id="form3Example3" class="form-control form-control-lg" placeholder="Vui lòng nhập tên đăng nhập" />
            <RadzenRequiredValidator Component="AccountUsername" Text="Vui lòng nhập tên đăng nhập" Popup="true" Style="position: absolute"/>
          </div>

          <!-- Password input -->
          <div class="form-outline mb-3">
            <label class="form-label" for="form3Example4">Mật khẩu</label>
            <RadzenPassword @bind-Value="acc.AccountPassword" Visible="@(passwordVisible == false)" Name="AccountPassword" style="display: block" id="form3Example4" class="form-control form-control-lg" placeholder="Nhập mật khẩu" />
            <RadzenTextBox @bind-Value="acc.AccountPassword" Visible="@passwordVisible" Name="AccountPassword" style="display: block" id="form3Example4" class="form-control form-control-lg" placeholder="Nhập mật khẩu" />
          </div>

          <div class="d-flex justify-content-between align-items-center">
            <!-- Checkbox -->
            <div class="form-check mb-0">
              <input class="form-check-input me-2" type="checkbox" @bind="passwordVisible" value="" id="form2Example3" />
              <label class="form-check-label" for="form2Example3">
                Hiện mật khẩu
              </label>
            </div>
            <a style="color:mediumblue;cursor:pointer" @onclick="ForgetPassword" class="text-body">Quên mật khẩu?</a>
          </div>
          <div class="text-center text-lg-start mt-4 pt-2">
            <button type="button" class="btn btn-primary btn-lg"
              style="padding-left: 2.5rem; padding-right: 2.5rem;" @onclick="CheckLogin">Đăng nhập</button>
            <p class="fw-bold mt-2 pt-1 mb-0">Chưa có tài khoản? <a style="color:mediumblue;cursor:pointer" @onclick="Register">Đăng ký</a></p>
          </div>
      </div>
    </div>
  </div>
</section>



	
@code {
    AccountService accountService = new AccountService();
    UserService userService = new UserService();

    Account acc = new Account();
    User user = new User();

    bool passwordVisible = false;

    public async void CheckLogin()
    {
        Account newAcc = new Account();

        try
        {
            if (acc.AccountUsername == null)
            {
                await JS.InvokeVoidAsync("eval", $@"document.getElementById(""form3Example3"").focus()");
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Thông báo", Detail = "Vui lòng nhập tên đăng nhập", Duration = 4000 });
            }
            else if (acc.AccountPassword == null)
            {
                await JS.InvokeVoidAsync("eval", $@"document.getElementById(""form3Example4"").focus()");
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Thông báo", Detail = "Vui lòng nhập mật khẩu", Duration = 4000 });
            }
            else
            {
                newAcc = await accountService.GetAccount(acc.AccountUsername, accountService.Encrypt(acc.AccountPassword));
                if(newAcc.AccountUsername != null && newAcc.AccountStatus == true)
                {
                    var role = newAcc.Toa.ToaPower;
                    var phone = newAcc.AccountUsername;
                    await sessionStorage.SetItemAsync("phone", phone);
                    try
                    {
                        user = await userService.GetUser(phone);
                        if(role == "Customer")
                        {
                            await Task.Delay(100);
                            await sessionStorage.SetItemAsync("customer_phone", user.UserPhone);
                            await Task.Delay(100);
                            await sessionStorage.SetItemAsync("customer_name", user.UserName);
                            await Task.Delay(100);
                            this.DialogService.Close(phone);
                        }
                        else if(role == "Owner")
                        {
                            await Task.Delay(100);
                            await sessionStorage.SetItemAsync("owner_phone", user.UserPhone);
                            await Task.Delay(100);
                            await sessionStorage.SetItemAsync("owner_name", user.UserName);
                            await Task.Delay(100);
                            NavigationManager.NavigateTo("/owner/index");
                        }
                        else
                        {
                            await Task.Delay(100);
                            await sessionStorage.SetItemAsync("admin_phone", user.UserPhone);
                            await Task.Delay(100);
                            await sessionStorage.SetItemAsync("admin_name", user.UserName);
                            await Task.Delay(100);
                            NavigationManager.NavigateTo("/admin/index");
                        }


                    }
                    catch(Exception ex)
                    {
                        if(role == "Customer")
                        {
                            await sessionStorage.SetItemAsync("customer_phone", phone);
                        }
                        else if(role == "Owner")
                        {
                            await sessionStorage.SetItemAsync("owner_phone", phone);
                            NavigationManager.NavigateTo("/owner/index");
                        }
                        else
                        {
                            await sessionStorage.SetItemAsync("admin_phone", phone);
                            NavigationManager.NavigateTo("admin/index");
                        }

                    }


                    NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Thành công", Detail = "Đăng nhập thành công", Duration = 4000 });
                    this.DialogService.Close(phone);
                }
                else if(newAcc.AccountStatus == false)
                {
                    NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Thông báo", Detail = "Tài khoản của bạn đã bị khóa. Vui lòng liên hệ quản trị viên để được giúp đỡ.", Duration = 5000 });
                }
                else
                {
                    NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Lỗi", Detail = "Sai thông tin tài khoản", Duration = 4000 });
                }
            }
        }
        catch(Exception Ex)
        {
            Console.WriteLine(Ex.ToString());
        }

    }
    public static bool IsPhoneNumber(string number)
    {
        if (number == null)
            return false;
        try{
            string temp = number.Substring(0, 2);
            if(temp == "09" || temp == "03" ||temp == "07" ||temp == "08" ||temp == "05")
            {
                if (number.Length == 10) return true;
            }
            return false;
        }catch(Exception e)
        {
            return false;
        }
    }

    public async void ForgetPassword()
    {
        this.DialogService.Close();
        Thread.Sleep(500);
        var res = await DialogService.OpenAsync<ForgetPassword>
        (
            "Khôi phục tài khoản",
               new Dictionary<string, object>() {},
               new DialogOptions() { ShowTitle = true, Width = "550px", Height = "", Resizable = true, Draggable = true, AutoFocusFirstElement = true }
        );
        if (res != null)
        {
            await DialogService.OpenAsync<Login>
            (
                "",
                   new Dictionary<string, object>() {},
                   new DialogOptions() { ShowTitle = true, Width = "1000px", Height = "400px", Resizable = true, Draggable = true, AutoFocusFirstElement = true }
            );
        }
    }

    public async void Register()
    {
        this.DialogService.Close();
        Thread.Sleep(500);
        await DialogService.OpenAsync<Register>
        (
            "Đăng ký tài khoản mới",
               new Dictionary<string, object>() {},
               new DialogOptions() { ShowTitle = true, Width = "1060px", Height = "537px", Resizable = true, Draggable = true, AutoFocusFirstElement = true }
        );
    }
}
