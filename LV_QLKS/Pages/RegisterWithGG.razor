@page "/createwithgoogle"
@using ShareModel.Custom
@layout Layout_Null

<AuthorizeView>
    <Authorized>
        @if(context.User != null)
        {
            foreach(var item in context.User.Claims)
            {
                if (item.Type.Contains("givenname"))
                    givenName = item.Value;
                if (item.Type.Contains("surname"))
                    surName = item.Value;
                if (item.Type.Contains("emailaddress"))
                    emailAddress = item.Value;
            }
            customer.UserPhone = emailAddress;
            customer.UserEmail = emailAddress;
            customer.UserName = surName + " " + givenName;
        }
    </Authorized>
</AuthorizeView>
<div class="container w-50">
        <div class="row">
            <div class="col">
                <RadzenTemplateForm TItem="User" Data=@customer>
                    <RadzenFieldset Text="Cập nhật thông tin cá nhân">
                        <div class="row mb-5">
                            <div class="col-md-4">
                                <RadzenLabel Text="Địa chỉ Gmail" />
                            </div>
                            <div class="col">
                                <RadzenTextBox style="display: block" Name="UserPhone" @bind-Value=customer.UserPhone Class="w-100" ReadOnly/>
                                <RadzenRequiredValidator Component="UserPhone" Text="First name is required" Popup="true" Style="position: absolute"/>
                            </div>
                        </div>
                        <div class="row mb-5">
                            <div class="col-md-4">
                                <RadzenLabel Text="Mật khẩu" />
                            </div>
                            <div class="col">
                                <div class="row">
                                    <div class="col-sm">
                                        <RadzenPassword Visible="@passwordVisible" style="display: block" Name="passWordOne" @bind-Value=passWordOne Placeholder="Mật khẩu" Class="w-100" />
                                        <RadzenTextBox @bind-Value="@passWordOne" style="display: block" Visible="@(passwordVisible == false)" />
                                        <RadzenRequiredValidator Component="passWordOne" Text="Vui lòng nhập mật khẩu" Popup="true" Style="position: absolute"/>
                                    </div>
                                    <div class="col-sm">
                                        <RadzenPassword Visible="@passwordVisible" style="display: block" Name="passWordTwo" @bind-Value=passWordTwo Placeholder="Nhập lại mật khẩu" Class="w-100" />
                                        <RadzenTextBox @bind-Value="@passWordTwo" style="display: block" Visible="@(passwordVisible == false)" />
                                        <RadzenRequiredValidator Component="passWordTwo" Text="Vui lòng nhập lại mật khẩu" Popup="true" Style="position: absolute"/>
                                    </div>
                                </div>
                                <br />
                                Ẩn mật khẩu <RadzenCheckBox @bind-Value="@passwordVisible" />
                            </div>
                        </div>
                        <div class="row mb-5">
                            <div class="col-md-4">
                                <RadzenLabel Text="Loại tài khoản" />
                            </div>
                            <div class="col">
                                <select class="form-control" @bind="account_Custom.ToaId">
                                    <option value="2" selected>Chủ khách sạn</option>
                                    <option value="3">Người dùng</option>
                                </select>
                            </div>
                        </div>
                        <div class="row mb-5">
                            <div class="col-md-4">
                                <RadzenLabel Text="Họ tên" />
                            </div>
                            <div class="col">
                                <RadzenTextBox style="display: block" Placeholder="Họ tên" Name="UserName" @bind-Value=@customer.UserName  Class="w-100" AutoComplete="false" />
                                <RadzenRequiredValidator Component="UserName" Text="Vui lòng nhập họ tên" Popup="true" Style="position: absolute"/>
                            </div>
                        </div>
                        <div class="row mb-5">
                            <div class="col-md-4">
                                <RadzenLabel Text="Số CCCD" />
                            </div>
                            <div class="col">
                                <RadzenTextBox style="display: block" Name="UserId" Placeholder="Số CCCD" @bind-Value=@customer.UserId  Class="w-100" AutoComplete="false" />
                                <RadzenRequiredValidator Component="UserId" Text="Vui lòng nhập số CCCD" Popup="true" Style="position: absolute"/>
                            </div>
                        </div>
                        <div class="row mb-5">
                            <div class="col-md-4">
                                <RadzenLabel Text="Giới tính" />
                            </div>
                            <div class="col">
                                <RadzenRadioButtonList @bind-Value=sex Orientation="Orientation.Vertical" TValue="int">
                                    <Items>
                                        <RadzenRadioButtonListItem Text="Nam" Value="1" TValue="int" />
                                        <RadzenRadioButtonListItem Text="Nữ" Value="2" TValue="int" />
                                    </Items>
                                </RadzenRadioButtonList>
                            </div>
                        </div>
                        <div class="row mb-5">
                            <div class="col-md-4">
                                <RadzenLabel Text="Ngày sinh" />
                            </div>
                            <div class="col">
                                <RadzenDatePicker Name="UserDateofbirth" Placeholder="Ngày sinh" Class="w-100" @bind-Value="customer.UserDateofbirth" DateFormat="dd/MM/yyyy" Max="DateTime.Now" onkeydown="return false" style="display: block"/>
                                <RadzenRequiredValidator Component="UserDateofbirth" Text="Vui lòng chọn ngày sinh" Popup="true" Style="position: absolute"/>
                            </div>
                        </div>
                        <div class="row mb-5">
                            <div class="col-md-4">
                                <RadzenLabel Text="Địa chỉ" />
                            </div>
                            <div class="col">
                                <RadzenTextBox style="display: block" Name="UserAddress" Placeholder="Địa chỉ" @bind-Value=@customer.UserAddress  Class="w-100" AutoComplete="false" />
                                <RadzenRequiredValidator Component="UserAddress" Text="Vui lòng nhập địa chỉ" Popup="true" Style="position: absolute"/>
                            </div>
                        </div>
                        <RadzenButton ButtonType="ButtonType.Submit" Text="Cập nhật" Click="AddUser"></RadzenButton>
                    </RadzenFieldset>
                </RadzenTemplateForm>
            </div>
        </div>
    </div>



@code {

    ShareModel.User customer = new ShareModel.User();
    Account account_Custom = new Account();

    UserService userService = new UserService();
    AccountService accountService = new AccountService();
    TypeOfAccountService typeOfAccountService = new TypeOfAccountService();
    //CheckGoogle
    string surName = "";
    string givenName = "";
    string emailAddress = "";
    string passWordOne = "";
    string passWordTwo = "";
    bool passwordVisible = true;
    //Giới tính
    private int sex = 1;

    protected override async Task OnInitializedAsync()
    {
        account_Custom.ToaId = 2;
    }

    protected async void AddUser()
    {
        if (customer.UserName == null || passWordOne.Length == 0 || passWordTwo.Length == 0 || customer.UserId == null || customer.UserDateofbirth == null || customer.UserEmail == null || customer.UserEmail.IndexOf("@") == -1) ;
        else if(passWordOne.Length < 5)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Thông báo", Detail = "Mật khẩu phải dài hơn 5 ký tự", Duration = 4000 });
        }
        else if(passWordOne != passWordTwo)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Thông báo", Detail = "Mật khẩu không khớp", Duration = 4000 });
        }
        else
        {
            if (sex == 1)
                customer.UserSex = true;
            else
                customer.UserSex = false;
            customer.AccountUsername = customer.UserPhone;
            // Thêm loại tài khoản
            var toa = await typeOfAccountService.GetTypeOfAccount(account_Custom.ToaId);
            account_Custom.Toa = toa;
            account_Custom.AccountUsername = customer.UserPhone;
            account_Custom.AccountPassword = accountService.Encrypt(passWordOne);
            if((await CheckAccInDB(account_Custom.AccountUsername)) == false)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Thông báo", Detail = "Số điện thoại hoặc Email đã được đăng ký, vui lòng kiểm tra lại", Duration = 4000 });
            }
            else
            {
                var resac = await accountService.AddAccount(account_Custom);
                if(resac != null)
                {
                    var res = await userService.AddUser(customer);
                    if (res != null)
                    {
                        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Thành công", Detail = "Cập nhật thành công", Duration = 4000 });
                        NavigationManager.NavigateTo("/");
                    }
                }
            }
        }
    }
    public async Task<bool> CheckAccInDB(string phone)
    {
        if (await accountService.CheckAccount(phone) == null)
            return true;
        else
            return false;
    }
}
