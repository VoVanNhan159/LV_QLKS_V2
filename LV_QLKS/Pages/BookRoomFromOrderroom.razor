
@using LV_QLKS.Data
@using LV_QLKS.Service
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.WebUtilities
@using ShareModel
@using Microsoft.Extensions.Configuration
@using ShareModel.Custom
@inject IConfiguration Configuration
@layout Layout_Null

    <link rel="stylesheet" href="/book/smart-forms.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">	 

    <div class="container">
    @if (listOrderroomdetail.Count > 0)
    {
        <div class="main-cn bg-white clearfix">
                    <div class="step">
                        <!-- Step -->
                        <ul class="payment-step text-center clearfix">
                            <li class="step-select">
                                <span>1</span>
                                <p>Chọn phòng</p>
                            </li>
                            <li class="step-part">
                                <span>2</span>
                                <p>Chi tiết đơn đặt phòng & Thanh toán</p>
                            </li>
                            <li>
                                <span>3</span>
                                <p>Đặt phòng thành công!</p>
                            </li>
                        </ul>
                        <!-- ENd Step -->
                    </div>
                    <style>
                        .span-custom{
                            font-weight: bold;
                            padding-right: 10px;
                        }
                    </style>
                    <!-- Payment Room -->
                    <div class="payment-room">
                        <div class="row">
                             <div class="col">
                                  <div class="payment-infor">
                                      <h2>@hoTel.HotelName</h2>
                                         <span class="star-room">
                                             <i class="glyphicon glyphicon-star"></i>
                                                        <i class="glyphicon glyphicon-star"></i>
                                                        <i class="glyphicon glyphicon-star"></i>
                                                        <i class="glyphicon glyphicon-star"></i>
                                                        <i class="glyphicon glyphicon-star"></i>
                                          </span>
                                          <ul style="list-style: none;padding: initial;">
                                              <li>
                                                  <span class="span-custom">Địa chỉ:</span>
                                                      @addressHotel
                                            </li>
                                            <li>
                                                  <span class="span-custom">Ngày nhận phòng:</span>
                                                  @dayStartFilter.ToString("dddd, dd, MMMM, yyyy", new System.Globalization.CultureInfo("vi-VN"))
                                          </li>
                                          <li>
                                                  <span class="span-custom">Ngày trả phòng:</span>
                                                  @dayEndFilter.ToString("dddd, dd, MMMM, yyyy", new System.Globalization.CultureInfo("vi-VN"))
                                          </li>
                                          <li>
                                                  <span class="span-custom">Thời gian lưu trú:</span>
                                                      @totalDay đêm
                                          </li>

                                      </ul>  
                                  </div>
                              </div>
                         </div>
                            <br />
                            <div class="row">
                                            @foreach (var item in listRoom)
                                            {
                                                    <div class="payment-price" style="margin-top: 0px;">
                                                    <div class="col-lg-5" style="padding-left: none;">
                                                        <ul style="list-style: none;padding: 25px;">
                                                            <li>
                                                                <span class="span-custom">Phòng:</span>
                                                                @item.RoomName
                                                            </li>
                                                            <li>
                                                                <span class="span-custom">Số lượng phòng:</span>
                                                                Tối đa @item.Tor.TorCapacity người lớn
                                                            </li>
                                                        </ul>
                                                    </div>
                                                    <div class="col-lg-5">
                                                        <div class="total-trip" style="padding: 0px; width: max-content;">
                                                            <p style="border-top: 0px;">
                                                                Giá: <ins>@hotelService.FormatVND((int)item.Tor.TorPrice) đồng<small>/đêm</small>(giảm @GetPercentOfRoom(item)%) * @totalDay</ins>
                                                                
                                                            </p><p style="border-top: 0px;">
                                                                = <ins>@hotelService.FormatVND(GetPriceAfterMinus(item) * (int)totalDay)</ins>
                                                            </p>
                                                        </div>
                                                    </div>  
                                                    <div class="col-lg-2" style="text-align-last: center;padding:25px">
                                                    <button class="btn btn-suscess" @onclick="()=> DeleteOrderroomDetail(item.RoomId)"><i class="fa fa-trash" aria-hidden="true"></i></button>  
                                                    </div>
                                                </div>
                                            }
                                        </div>
                            <div class="section colm colm6 total-trip" style="padding-top: 20px;padding-bottom: 10px;font-size: large;">
                                <p>
                                    Tổng tiền:  <ins style="color: #25ab4b;">@hotelService.FormatVND((int)@totalPrice)</ins>
                                </p>
                            </div>
                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Lựa chọn hình thức thanh toán</RadzenText>
                                <RadzenRadioButtonList @bind-Value=@tt Orientation="Orientation.Vertical" TValue="int">
                                    <Items>
                                        <RadzenRadioButtonListItem Text="Thanh toán khi nhận phòng" Value="1" TValue="int" />
                                        <RadzenRadioButtonListItem Text="Thanh toán trực tuyến" Value="2" TValue="int" />
                                    </Items>
                                </RadzenRadioButtonList>
                            <br />
                            <div class="section colm colm6" style="padding-bottom:10px;">
                                <input type="checkbox" value=@isChecked @onchange=CheckTerms/> Tôi đồng ý với <a style="font-style:italic">"Chính sách và điều khoản dịch vụ"</a>
                            </div>
                            <div class="form-footer">
                                <input type="submit" class="btn btn-success" value="Xác nhận đặt phòng" @onclick=BookRoomOrder disabled="@disable"/>
                                <input type="reset" class="btn btn-light" value="Trở về" @onclick="CancelModal"/> 
                            </div>
                        </div>
                    </div>
    }
    else
    {
        <p>Đang tải ...</p>
    }
</div>

@code{
    [Parameter]
    public UserInfo UserInfo { get; set; }

    private IJSObjectReference module;
    UserService userService = new UserService();
    RoomService roomService = new RoomService();
    HotelService hotelService = new HotelService();
    OrderroomService orderroomService = new OrderroomService();
    TypeOfRoomService typeOfRoomService = new TypeOfRoomService();
    ImageService imageService = new ImageService();
    OrderroomDetailService orderroomDetailService = new OrderroomDetailService();
    DiscountdetailService discountdetailService = new DiscountdetailService();

    List<Discountdetail> discountdetails = new List<Discountdetail>();
    ShareModel.Hotel hoTel = new ShareModel.Hotel();
    List<ShareModel.Room> listRoom = new List<ShareModel.Room>();
    User user = new User();
    Typeofroom typeofroom = new Typeofroom();
    ShareModel.Orderroom orderroom = new ShareModel.Orderroom();
    List<ShareModel.Orderroom> listOrderroom = new List<ShareModel.Orderroom>();
    List<Orderroomdetail> listOrderroomdetail = new List<Orderroomdetail>();

    DateTime dayStartFilter;
    DateTime dayEndFilter;
    private string quantity = "1";

    //khai báo biến sử dụng cho checkbox điều khoản dịch vụ
    private InputCheckbox chk;
    private bool isChecked = false;
    private bool disable = true;

    //Tổng tiền đặt phòng
    private double totalPrice = 0;
    private double totalDay;

    private string addressHotel = "";
    private string urlImageRoom = "";
    private string torPrice = "0";

    // Hình thức thanh toán
    private int tt = 1;
    //start hub
    private HubConnection hubConnection;
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    Task SendMessage() => hubConnection.SendAsync("SendMessage");
    //end hub
    protected override async Task OnInitializedAsync()
    {
        try
        {

            var phone = await sessionStorage.GetItemAsync<string>("customer_phone");
            user = await userService.GetUser(phone);

            listOrderroom = await orderroomService.GetAllOrderromOfUser(user.UserPhone);
            orderroom = listOrderroom.FirstOrDefault(lo => lo.OrderroomStatus == "3");
            listOrderroomdetail = await orderroomDetailService.GetAllOrderromDetailOfOrderrom(orderroom.OrderroomId);
            discountdetails = await discountdetailService.GetAllDiscountdetailActive();

            foreach (var item in listOrderroomdetail)
            {
                var room = await roomService.GetRoom(item.RoomId);
                listRoom.Add(room);
            }
            hoTel = listRoom.First().Hotel;
            addressHotel = hotelService.GetAddressHotel(hoTel.HotelId);
            dayStartFilter = (DateTime)orderroom.OrderroomDatestart;
            dayEndFilter = (DateTime)orderroom.OrderroomDateend;
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/HotelBrHub"))
                .Build();
            await hubConnection.StartAsync();
            CalTotalPrice();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    //Get tỉ lệ khuyến mãi
    public int GetPercentOfRoom(Room room)
    {
        int percent = 0;
        foreach (var item in discountdetails)
        {
            if(item.RoomId == room.RoomId)
                if (percent <= item.Percent)
                    percent = (int)item.Percent;
        }
        return percent;
    }
    //Get giá sau khi khuyến mãi
    public int GetPriceAfterMinus(Room room)
    {
        int res = 0;
        int percent = 0;
        foreach (var item in discountdetails)
        {
            if(item.RoomId == room.RoomId)
                if (percent <= item.Percent)
                    percent = (int)item.Percent;
        }
        res = (int)room.Tor.TorPrice / 100 * (100 - percent);
        return res;
    }

    protected void CancelModal()
    {
        this.DialogService.Close();
    }
    //Đặt phòng
    protected async void BookRoomOrder()
    {
        try
        {
            await sessionStorage.SetItemAsync<string>("dayStartOrder",dayStartFilter.ToShortDateString());
            await sessionStorage.SetItemAsync<string>("dayEndOrder",dayEndFilter.ToShortDateString());
            await sessionStorage.SetItemAsync<string>("vnp_Amount",totalPrice.ToString());
            await sessionStorage.SetItemAsync<string>("orderroom_id",orderroom.OrderroomId.ToString());
            Payment();
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }


    }
    // Kiểm tra đã check vào ô "Chính sách"
    protected void CheckTerms()
    {
        disable = isChecked;
        isChecked = !isChecked;
        StateHasChanged();
    }

    protected void RadioChanged()
    {

    }

    protected void CalTotalPrice()
    {
        totalDay = (dayEndFilter - dayStartFilter).TotalDays;
        foreach (var item in listRoom)
        {
            totalPrice += totalDay * (double)GetPriceAfterMinus(item);
        }
        StateHasChanged();
    }

    private void QuatityChange(string value)
    {
        quantity = value;
        CalTotalPrice();
    }


    //Thanh toán trực tuyền
    bool paying = false;
    public async void Payment()
    {
        Pages.Index index = new Pages.Index();
        string url = "https://sandbox.vnpayment.vn/paymentv2/vpcpay.html";
        string returnUrl = index.UrlPluginFB + "/paymentconfirmofbookroom";
        string tmnCode = "M4SI0GQK";
        string hashSecret = "TEPHMKQSDCNVKDFCAMUICRAJVMMXNQFF";

        PayLib pay = new PayLib();

        pay.AddRequestData("vnp_Version", "2.0.0"); //Phiên bản api mà merchant kết nối. Phiên bản hiện tại là 2.0.0
        pay.AddRequestData("vnp_Command", "pay"); //Mã API sử dụng, mã cho giao dịch thanh toán là 'pay'
        pay.AddRequestData("vnp_TmnCode", tmnCode); //Mã website của merchant trên hệ thống của VNPAY (khi đăng ký tài khoản sẽ có trong mail VNPAY gửi về)
        pay.AddRequestData("vnp_Amount", (totalPrice*100).ToString()); //số tiền cần thanh toán, công thức: số tiền * 100 - ví dụ 10.000 (mười nghìn đồng) --> 1000000
        pay.AddRequestData("vnp_BankCode", ""); //Mã Ngân hàng thanh toán (tham khảo: https://sandbox.vnpayment.vn/apis/danh-sach-ngan-hang/), có thể để trống, người dùng có thể chọn trên cổng thanh toán VNPAY
        pay.AddRequestData("vnp_CreateDate", DateTime.Now.ToString("yyyyMMddHHmmss")); //ngày thanh toán theo định dạng yyyyMMddHHmmss
        pay.AddRequestData("vnp_CurrCode", "VND"); //Đơn vị tiền tệ sử dụng thanh toán. Hiện tại chỉ hỗ trợ VND
        pay.AddRequestData("vnp_IpAddr", GetIp()); //Địa chỉ IP của khách hàng thực hiện giao dịch
        pay.AddRequestData("vnp_Locale", "vn"); //Ngôn ngữ giao diện hiển thị - Tiếng Việt (vn), Tiếng Anh (en)
        pay.AddRequestData("vnp_OrderInfo", "Thanh toan don hang"); //Thông tin mô tả nội dung thanh toán
        pay.AddRequestData("vnp_OrderType", "other"); //topup: Nạp tiền điện thoại - billpayment: Thanh toán hóa đơn - fashion: Thời trang - other: Thanh toán trực tuyến
        pay.AddRequestData("vnp_ReturnUrl", returnUrl); //URL thông báo kết quả giao dịch khi Khách hàng kết thúc thanh toán
        pay.AddRequestData("vnp_TxnRef", DateTime.Now.Ticks.ToString()); //mã hóa đơn

        string paymentUrl = pay.CreateRequestUrl(url, hashSecret);


        if(paying == false){

            if (tt == 2)
            {
                // 1 là thanh toán tiền khi nhận phòng
                // 2 là thanh toán trực tuyến
                await sessionStorage.SetItemAsStringAsync("orderroom_id", orderroom.OrderroomId.ToString());
                await JS.InvokeVoidAsync("open", paymentUrl, "_blank");
                paying = true;
            }
            else if (tt == 1)
            {
                CancelModal();
                await AddOrderroom();
                await DialogService.OpenAsync<BookRoomByMoney>
                (
                    "Đặt phòng thành công",
                       new Dictionary<string, object>() {},
                       new DialogOptions() { ShowTitle = true, Width = "", Height = "", Resizable = true, Draggable = true, AutoFocusFirstElement = true }
                );

            }
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Bạn đang thanh toán! Vui lòng đặt lại phòng nếu đã tắt giao diện thanh toán.");
        }
    }
    public string GetIp()
    {
        UserInfo = new UserInfo();
        return UserInfo.IPAddress;
    }



    //Thêm đơn đặt phòng - Thanh toán khi nhận phòng
    public async Task AddOrderroom()
    {
        var orderroomCustom = new Orderroom_Custom();
        orderroomCustom.OrderroomId = orderroom.OrderroomId;
        orderroomCustom.OrderroomDate = orderroom.OrderroomDate;
        orderroomCustom.OrderroomDatestart = orderroom.OrderroomDatestart;
        orderroomCustom.OrderroomDateend = orderroom.OrderroomDateend;
        orderroomCustom.UserPhone = orderroom.UserPhone;
        orderroomCustom.OrderroomStatus = "1";
        orderroomCustom.OrderroomTotalprice = orderroom.OrderroomTotalprice;
        var res = await orderroomService.UpdateOrderroomAfterPayment(orderroomCustom);
        if(res != null)
        {
            if (IsConnected)
               await SendMessage();
        }
    }

    private async void DeleteOrderroomDetail(int room_id)
    {

        var res = await orderroomDetailService.DeleteOrderromDetailOfOrderrom(orderroom.OrderroomId, room_id);
        var detail = listRoom.SingleOrDefault(lr => lr.RoomId == room_id);
        listRoom.Remove(detail);
        if (res == 1)
        {
            var orderroomTemp = await orderroomService.GetOrderrom(orderroom.OrderroomId);
            var roomTemp = await roomService.GetRoom(room_id);
            var priceOfRoomTemp = roomTemp.Tor.TorPrice * (DateTime.Parse(orderroom.OrderroomDateend.ToString()) - DateTime.Parse(orderroom.OrderroomDatestart.ToString())).TotalDays;
            var odcheckcustom = new Orderroom_Custom();
            odcheckcustom.OrderroomId = orderroomTemp.OrderroomId;
            odcheckcustom.OrderroomDate = orderroomTemp.OrderroomDate;
            odcheckcustom.OrderroomDatestart = orderroomTemp.OrderroomDatestart;
            odcheckcustom.OrderroomDateend = orderroomTemp.OrderroomDateend;
            odcheckcustom.UserPhone = orderroomTemp.UserPhone;
            odcheckcustom.OrderroomStatus = "3";
            odcheckcustom.OrderroomTotalprice = orderroomTemp.OrderroomTotalprice;

            odcheckcustom.OrderroomTotalprice -= (int)priceOfRoomTemp;

            var ressod = await orderroomService.UpdateOrderroomAfterPayment(odcheckcustom);
            if (ressod.OrderroomId > 0)
            {
                if(listRoom.Count == 0)
                {
                    var resdeleteod = await orderroomService.DeleteOrderrom(orderroom.OrderroomId);
                    if(resdeleteod == 1){

                        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Thành công", Detail = "Xóa thành công", Duration = 4000 });
                    }
                }
                totalPrice = 0;
                CalTotalPrice();
            }
        }
        else
        {
           NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Thành công", Detail = "Xóa không thành công", Duration = 4000 });
        }
        StateHasChanged();
    }
    protected void DayStartChange()
    {
        dayEndFilter = dayStartFilter.AddDays(1);
        totalPrice = 0;
        //discountdetails = discountdetailService.GetAllDiscountdetailActiveDate(dayStartFilter, dayEndFilter).Result;
        CalTotalPrice();
    }
    protected void DayEndChange()
    {
        totalPrice = 0;
        //discountdetails = discountdetailService.GetAllDiscountdetailActiveDate(dayStartFilter, dayEndFilter).Result;
        CalTotalPrice();
    }
}
