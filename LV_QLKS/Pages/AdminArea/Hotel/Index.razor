@page "/admin/hotel/index"
@page "/admin/hotel"
@using System.Globalization
@using Microsoft.AspNetCore.SignalR.Client
@using ShareModel.Custom
@using System.Net.Mail
@layout Layout_Admin
<PageTitle>Danh sách khách sạn</PageTitle>
<div class="main-content">
    <RadzenText Style="color:darkviolet" TextStyle="TextStyle.DisplayH4" TextAlign="TextAlign.Center"  Text="Danh sách khách sạn"></RadzenText>
    <div class="section__content section__content--p30">
        <RadzenDataGrid EmptyText="Không có dữ liệu, vui lòng kiểm tra lại" Data="@hotels" TItem="Hotel" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Center" AllowSorting="true" 
            FilterMode="FilterMode.Simple" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" PageSizeOptions="@pageSizeOptions" PageSize="5" PageSizeText="mẫu tin/trang" ShowPagingSummary="@showPagerSummary" PagingSummaryFormat="@pagingSummaryFormat" Page="@OnPage">
            <Columns>
                <RadzenDataGridColumn TItem="Hotel" Width="20%" Property="HotelName" Title="Tên khách sạn" />
                <RadzenDataGridColumn TItem="Hotel" Title="Địa chỉ" >
                    <Template Context="data">
                        @addressHotels.FirstOrDefault(cr=>cr.Key == data.HotelId).Value
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Width="10%" TItem="Hotel" Title="Số phòng">
                    <Template Context="data">
                        @countRoom.FirstOrDefault(cr=>cr.Key == data.HotelId).Value
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Width="23%" TItem="Hotel" Title="Trạng thái">
                    <Template Context="data">
                        <RadzenRadioButtonList Change="() => UpdateHotel(data)" @bind-Value=data.HotelStatus Orientation="Orientation.Horizontal" TValue="bool?">
                            <Items>
                                <RadzenRadioButtonListItem Text="Kích hoạt" Value="true" TValue="bool?" />
                                <RadzenRadioButtonListItem Text="Tạm khóa" Value="false" TValue="bool?" />
                            </Items>
                        </RadzenRadioButtonList>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
</div>

@code {
    //Khai báo các biến
    List<ShareModel.Hotel> hotels = new List<ShareModel.Hotel>();
    List<ShareModel.Hotel> hotelsTemp = new List<ShareModel.Hotel>();
    ShareModel.User owner = new ShareModel.User();
    Dictionary<int, int> countRoom = new Dictionary<int, int>();
    Dictionary<int, string> addressHotels = new Dictionary<int, string>();

    //Khai báo các service
    HotelService hotelService = new HotelService();
    UserService userService = new UserService();
    RoomService roomService = new RoomService();

    //Phân trang
    string pagingSummaryFormat = "Trang hiển thị {0}/{1} (tổng cộng {2} mẫu tin)";

    IEnumerable<int> pageSizeOptions = new int[] { 5, 10, 15, 20 };
    bool showPagerSummary = true;

    void OnPage(PagerEventArgs args)
    {
        StateHasChanged();
    }
    //start hub
    private HubConnection hubConnection;

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    Task SendMessage() => hubConnection.SendAsync("SendMessage");
    //end hub
    protected override async Task OnInitializedAsync()
    {
        try
        { 
            hotels = await hotelService.GetAllHotel();
            foreach (var item in hotels)
            {
                var count = hotelService.CountRoomOfHotel(item.HotelId);
                countRoom.Add(item.HotelId, count);
                var address = hotelService.GetAddressHotel(item.HotelId);
                addressHotels.Add(item.HotelId, address);
            }
            //hubConnection = new HubConnectionBuilder()
            //    .WithUrl(NavigationManager.ToAbsoluteUri("/HotelBrHub"))
            //    .Build();
            //await hubConnection.StartAsync();
            //StateHasChanged();
        }
        catch(Exception ex)
        {

        }
    }
    public async void ReloadData()
    {
        addressHotels.Clear();
        countRoom.Clear();
        hotels = await hotelService.GetAllHotel();
        foreach (var item in hotels)
        {
            var count = hotelService.CountRoomOfHotel(item.HotelId);
            countRoom.Add(item.HotelId, count);
            var address = hotelService.GetAddressHotel(item.HotelId);
            addressHotels.Add(item.HotelId, address);
        }
        await this.InvokeAsync(() => {
            StateHasChanged();
        });
    }
    protected string GetAddressHotel(int hotel_id)
    {
        return hotelService.GetAddressHotel(hotel_id);
    }
    protected async void ShowEditHotel(int id)
    {
        var res = await DialogService.OpenAsync<AdminArea.Hotel.Edit>("",
             new Dictionary<string, object>() { { "id", id } },
             new DialogOptions() { Width = "800px", Height = "500px", Resizable = true, Draggable = true });
        if(res == true)
        {
            countRoom.Clear();
            addressHotels.Clear();
            hotels = await hotelService.GetAllHotel();
            foreach (var item in hotels)
            {
                var count = hotelService.CountRoomOfHotel(item.HotelId);
                countRoom.Add(item.HotelId, count);
                var address = hotelService.GetAddressHotel(item.HotelId);
                addressHotels.Add(item.HotelId, address);
            }
            if (IsConnected)
                await SendMessage();
            StateHasChanged();
        }
    }
    protected async void UpdateHotel(Hotel hotelre)
    {
        var hotelTemp = await hotelService.GetHotel(hotelre.HotelId);
        Hotel_Custom hotel = new Hotel_Custom();
        hotel.HotelId = hotelTemp.HotelId;
        hotel.ProvinceId = hotelTemp.ProvinceId;
        hotel.DistrictId = hotelTemp.DistrictId;
        hotel.WardId = hotelTemp.WardId;
        hotel.HotelName = hotelTemp.HotelName;
        hotel.HotelAddress = hotelTemp.HotelAddress;
        hotel.HotelX = hotelTemp.HotelX;
        hotel.HotelY = hotelTemp.HotelY;
        hotel.UserPhone = hotelTemp.UserPhone;
        hotel.HotelStatus = hotelre.HotelStatus;
        var res = await hotelService.UpdateHotel(hotel);
        if (res != null)
        {
            ReloadData();
            if(res.HotelStatus == false)
            {
                SendMail(res);
            }
            if (IsConnected)
                await SendMessage();
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Thành công", Detail = "Cập nhật thành công", Duration = 4000 });
        }
    }
    private async void SendMail(Hotel_Custom hotel)
    {
        var user = await userService.GetUser(hotel.UserPhone);
        try
        {
            using (MailMessage mail = new MailMessage())
            {
                mail.From = new MailAddress("vovannhan2727bc@outlook.com");
                mail.To.Add(user.UserEmail);
                mail.Subject = $"Thông báo khách sạn {hotel.HotelName} đã bị tạm khóa";
                mail.Body = "Kính chào khách hàng: " + user.UserName.ToUpper();
                mail.Body += $"<p>Chúng tôi đã tạm khóa khách sạn {hotel.HotelName} của bạn<p/>";
                mail.Body += "<p>Vui lòng liên hệ với quản trị viên để được hỗ trợ</p>";

                mail.Body += "<br>Trân trọng,<br>";
                mail.IsBodyHtml = true;

                using (SmtpClient smtp = new SmtpClient("smtp.office365.com", 587))
                {
                    smtp.Credentials = new System.Net.NetworkCredential("vovannhan2727bc@outlook.com", "8vxzX$PS123");
                    smtp.EnableSsl = true;
                    smtp.Send(mail);
                }
            }
        }
        catch (Exception ex)
        {
            throw;
        }

    }
}
