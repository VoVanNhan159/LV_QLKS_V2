
@layout Layout_Owner
@using Microsoft.AspNetCore.SignalR.Client
@using ShareModel;
@using ShareModel.Custom
@using System.Net.Mail

@if(orderroom.UserPhone != null)
{
    <div>
        <div class="section__content section__content--p30">
            <h3 style="text-align:center">Danh sách phòng được đặt</h3>
            <br />
            <p>Ngày nhận phòng: @DateTime.Parse(orderroom.OrderroomDatestart.ToString()).ToString("dd, MMMM, yyyy", new System.Globalization.CultureInfo("vi-VN"))</p>
            <p>Ngày trả phòng: @DateTime.Parse(orderroom.OrderroomDateend.ToString()).ToString("dd, MMMM, yyyy", new System.Globalization.CultureInfo("vi-VN"))</p>
            <br />
            <table class="table">
            <thead>
                <tr>
                    <th>
                        Tên phòng
                    </th>
                    <th>
                        Tầng
                    </th>
                    <th>
                        Sức chứa
                    </th>
                </tr>
            </thead>
            <tbody>
                @if(orderroomdetails.Count > 0 )
                {
                    foreach (var item in orderroomdetails)
                    {
                        <tr>
                            <td>
                                @item.Room.RoomName
                            </td>
                            <td>@GetFloor(item.Room.FloorId).FloorName</td>
                            <td>
                                @GetTypeofroom(item.Room.TorId).TorCapacity người
                            </td>
                        </tr>
                    }
                    
                }
            </tbody>
        </table>
        </div>
    </div>
}


@code {
    [Parameter]
    public int id { get; set; }

    int status = 0;
    Orderroom orderroom = new Orderroom();
    List<Orderroomdetail> orderroomdetails = new List<Orderroomdetail>();
    List<Typeofroom> typeofrooms = new List<Typeofroom>();
    List<Floor> floors = new List<Floor>();

    OrderroomService orderroomService = new OrderroomService();
    OrderroomDetailService orderroomDetailService = new OrderroomDetailService();
    TypeOfRoomService typeOfRoomService = new TypeOfRoomService();
    HotelService hotelService = new HotelService();
    FloorService floorService = new FloorService();
    RoomService roomService = new RoomService();
    UserService userService = new UserService();
    //start hub
    private HubConnection hubConnection;
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/HotelBrHub"))
            .Build();
        await hubConnection.StartAsync();
    }

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    Task SendMessage() => hubConnection.SendAsync("SendMessage");
    //end hub
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender){
            try
            {
                orderroom = await orderroomService.GetOrderrom(id);
                status = int.Parse(orderroom.OrderroomStatus);
                orderroomdetails = await orderroomDetailService.GetAllOrderromDetailOfOrderrom(id);
                typeofrooms = await typeOfRoomService.GetAllTypeOfRoom();
                floors = await floorService.GetAllFloor();
                StateHasChanged();
            }
            catch(Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }
        }

    }
    protected Typeofroom GetTypeofroom(int id)
    {
        foreach (var item in typeofrooms)
        {
            if(item.TorId == id)
            {
                return item;
            }
        }
        return null;
    }
    protected Floor GetFloor(int id)
    {
        foreach (var item in floors)
        {
            if(item.FloorId == id)
            {
                return item;
            }
        }
        return null;
    }
}
