@page "/discountdetail/import"
@using Microsoft.AspNetCore.SignalR.Client
@using ShareModel.Custom
@inject IWebHostEnvironment Environment

<div class="forms-sample">
    <div class="form-group">
        <label for="exampleInputEmail1">Vui lòng chọn file CTKM cần Import</label>
        <br />
        <InputFile OnChange="LoadFiles" />
        <label for="exampleInputEmail1">Bạn có thể tải xuống danh sách mẫu </label>
        <button @onclick=ExportFileExcel>
            <i class="fa fa-download" aria-hidden="true"></i>tại đây
        </button>
    </div>
    <div class="row">
        <div class="col-lg-3" style="text-align:center">
        </div>
        <div class="col-lg-3" style="text-align:center">
            <RadzenButton ButtonStyle="ButtonStyle.Success" Click="ImportDiscountdetail" Text="Thêm"></RadzenButton>
        </div>
        <div class="col-lg-3"  style="text-align:center">
            <RadzenButton ButtonStyle="ButtonStyle.Secondary" Click="CloseDialog" Text="Hủy bỏ"></RadzenButton>
        </div>
        <div class="col-lg-3"  style="text-align:center">
        </div>
    </div>
</div>
@code {
    DiscountdetailService discountdetailService = new DiscountdetailService();
    DiscountDetail_Custom discountDetail_Custom = new DiscountDetail_Custom();
    List<Discountdetail> discountdetails = new List<Discountdetail>();
    List<DiscountDetail_Custom> discountDetail_Customs = new List<DiscountDetail_Custom>();
    string filePath = "";
    string phone;
    //start hub
    private HubConnection hubConnection;
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/HotelBrHub"))
            .Build();
        await hubConnection.StartAsync();
    }

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    Task SendMessage() => hubConnection.SendAsync("SendMessage");
    //end hub
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        phone = await sessionStorage.GetItemAsync<string>("owner_phone");
        if (phone != null)
            discountdetails = await discountdetailService.GetAllDiscountdetailActiveOfOwner(phone);
    }
    protected async void ExportFileExcel()
    {
        var excelBytes = await discountdetailService.ExportRoomToExcel(phone);
        var fileName = "Danh sách chi tiết khuyến mãi";
        JS.InvokeVoidAsync("saveAsFile", $"{fileName}_{DateTime.Now.ToString("yyyyMMdd_HHmmss")}.xlsx", Convert.ToBase64String(excelBytes));
    }
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        int countDis = 0;
        foreach (var file in e.GetMultipleFiles(1))
        {
            try
            {
                var filename = file.Name;
                var size = file.Size;
                var path = Path.Combine(Environment.WebRootPath, "fileExcel", filename);
                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(size).CopyToAsync(fs);
                System.IO.FileInfo fileInfo = new System.IO.FileInfo(path);
                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                using (ExcelPackage excelPackage = new ExcelPackage(fileInfo))
                {
                    ExcelWorksheet worksheet = excelPackage.Workbook.Worksheets.FirstOrDefault();
                    int totalCollumn = worksheet.Dimension.End.Column;
                    int totalRow = worksheet.Dimension.End.Row;

                    for (int row = 2; row <= totalRow; row++)
                    {
                        DiscountDetail_Custom discountDetail_Custom = new DiscountDetail_Custom();
                        for (int col = 1; col <= totalCollumn; col++)
                        {
                            if(worksheet.Cells[row, col].Value != null)
                            {
                                var value = worksheet.Cells[row, col].Value.ToString();
                                if (col == 1) discountDetail_Custom.DiscountId = int.Parse(value);
                                if (col == 2) discountDetail_Custom.RoomId = int.Parse(value);
                                if (col == 3) discountDetail_Custom.Percent = int.Parse(value);
                            }   
                        }
                        discountDetail_Customs.Add(discountDetail_Custom);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }
    protected async void ImportDiscountdetail(){
        int countCheckAdd = 0;
        int countCheckUpdate = 0;
        int countCheckError = 0;
        int minIdOfDiscount = 0;
        if(discountdetails.Count > 0)
        {
            minIdOfDiscount = discountdetails.Min(dc => dc.DiscountId);
        }
        List<DiscountDetail_Custom> discountDetail_CustomsReturn = new List<DiscountDetail_Custom>();
        foreach (var item in discountDetail_Customs)
        {
            try{
                if (discountdetails.Any(dc=>dc.DiscountId == item.DiscountId && dc.RoomId == item.RoomId) && item.RoomId > 0 && item.Percent > 0 && item.Percent <= 100)
                {
                    if(minIdOfDiscount <= item.DiscountId)
                    {
                       var resUpdate = await discountdetailService.UpdateDiscountDetail(item);
                        if(resUpdate.RoomId > 0)
                        {
                            discountDetail_CustomsReturn.Add(resUpdate);
                            countCheckUpdate++;
                        } 
                    }
                }
                else if(item.Percent > 0 && item.Percent <= 100)
                {
                    var resAdd = await discountdetailService.AddDiscountDetail(item);
                    if(resAdd.RoomId > 0)
                    {
                        discountDetail_CustomsReturn.Add(resAdd);
                        countCheckAdd++;
                    }
                }
            }
            catch(Exception ex)
            {
                countCheckError++;
            }
        }
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Thành công", Detail = "Thêm " + countCheckAdd + " CTKM, cập nhật " + countCheckUpdate + " CTKM thành công", Duration = 4000 });
        if (IsConnected)
            await SendMessage();
        if(countCheckError > 0)
            this.DialogService.Close(discountDetail_CustomsReturn);
        else
            this.DialogService.Close(discountDetail_CustomsReturn);
    }
    protected void CloseDialog()
    {
        this.DialogService.Close();
    }
}
