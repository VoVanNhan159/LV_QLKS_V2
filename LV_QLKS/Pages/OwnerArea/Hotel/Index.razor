@page "/hotel/index"
@page "/hotel"
@using System.Globalization
@layout Layout_Owner

<div class="main-content">
    <div class="section__content section__content--p30">
        <RadzenDataGrid EmptyText="Không có dữ liệu, vui lòng kiểm tra lại" Data="@hotels" TItem="Hotel" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Center" AllowSorting="true" 
            PageSizeOptions="@pageSizeOptions" PageSize="5" PageSizeText="mẫu tin/trang" ShowPagingSummary="@showPagerSummary" PagingSummaryFormat="@pagingSummaryFormat" Page="@OnPage">
            <Columns>
                <RadzenDataGridColumn TItem="Hotel" Width="20%" Property="HotelName" Title="Tên khách sạn" />
                <RadzenDataGridColumn TItem="Hotel" Title="Địa chỉ">
                    <Template Context="data">
                        @addressHotels.FirstOrDefault(cr=>cr.Key == data.HotelId).Value
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Width="10%" TItem="Hotel" Title="Số phòng">
                    <Template Context="data">
                        @countRoom.FirstOrDefault(cr=>cr.Key == data.HotelId).Value
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Width="13%" TItem="Hotel" Title="Trạng thái">
                    <Template Context="data">
                        @if (data.HotelStatus == true)
                        {
                            <p style="color:limegreen">Đang sử dụng</p>
                        }
                        else
                        {
                            <p style="color:gray">Tạm ngưng sử dụng</p>
                        } 
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Hotel" Width="10%" Title="Xem ảnh">
                    <Template Context="data">
                         <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="group_work" Class="m-1" Click=@(() => PopupImage(data.HotelId)) />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Width="10%" TItem="Hotel" Title="Chỉnh sửa">
                    <Template Context="data">
                        <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="build" Class="m-1" Click=@(() => ShowEditHotel(data.HotelId)) />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
</div>

@code {
    //Khai báo các biến
    List<ShareModel.Hotel> hotels = new List<ShareModel.Hotel>();
    List<ShareModel.Hotel> hotelsTemp = new List<ShareModel.Hotel>();
    ShareModel.User owner = new ShareModel.User();
    Dictionary<int, int> countRoom = new Dictionary<int, int>();
    Dictionary<int, string> addressHotels = new Dictionary<int, string>();

    //Khai báo các service
    HotelService hotelService = new HotelService();
    UserService userService = new UserService();
    RoomService roomService = new RoomService();

    //Phân trang
    string pagingSummaryFormat = "Trang hiển thị {0}/{1} (tổng cộng {2} mẫu tin)";

    IEnumerable<int> pageSizeOptions = new int[] { 5, 10, 15, 20 };
    bool showPagerSummary = true;

    void OnPage(PagerEventArgs args)
    {
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        { 

            var phone = await sessionStorage.GetItemAsync<string>("owner_phone");
            owner = await userService.GetUser(phone);
            hotels = await hotelService.GetAllHotelOfOwner(owner.UserPhone);
            foreach (var item in hotels)
            {
                var count = hotelService.CountRoomOfHotel(item.HotelId);
                countRoom.Add(item.HotelId, count);
                var address = hotelService.GetAddressHotel(item.HotelId);
                addressHotels.Add(item.HotelId, address);
            }
            StateHasChanged();
        }
        catch(Exception ex)
        {

        }
    }
    public async void PopupImage(int id)
    {
        {
            await DialogService.OpenAsync<OwnerArea.Hotel.Image_Hotel>("",
                new Dictionary<string, object>() { { "id", id } },
                new DialogOptions() { Width = "700px", Height = "570px", Resizable = true, Draggable = true });
        }
    }
    protected string GetAddressHotel(int hotel_id)
    {
        return hotelService.GetAddressHotel(hotel_id);
    }
    protected async void ShowEditHotel(int id)
    {
        var res = await DialogService.OpenAsync<OwnerArea.Hotel.Edit>("",
             new Dictionary<string, object>() { { "id", id } },
             new DialogOptions() { Width = "700px", Height = "500px", Resizable = true, Draggable = true });
        if(res == true)
        {
            NavigationManager.NavigateTo("/hotel/create");
            NavigationManager.NavigateTo("/hotel/index");
        }
    }
}
