@page "/hotel/edit/{id:int}"
@using ShareModel.Custom
@layout Layout_Owner
@using Radzen
@using Tewr.Blazor.FileReader
@inject IFileReaderService fileReader
@inject HttpClient client

<div>
    <div class="section__content section__content--p30">
        <div class="container">
            <div class="row">
                <div class="col">
                    <RadzenTemplateForm TItem="Hotel_Custom" Data=@hotel>
                        <RadzenFieldset Text="Cập nhật khách sạn của bạn">
                            <div class="row mb-5">
                                <div class="col-md-4">
                                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Tên khách sạn của bạn</RadzenText>
                                </div>
                                <div class="col">
                                    <RadzenTextBox style="display: block" Placeholder="Nhập tên khách sạn của bạn" Name="HotelName" @bind-Value=@hotel.HotelName  Class="w-100" AutoComplete="false" />
                                    <RadzenRequiredValidator Component="HotelName" Text="Vui lòng nhập tên khách sạn" Popup="true" Style="position: absolute"/>
                                </div>
                            </div>
                            <div class="row mb-5">
                                <div class="col-md-4">
                                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Địa chỉ khách sạn</RadzenText>
                                </div>
                                <div class="col">
                                    <RadzenTextBox style="display: block" Placeholder="Nhập địa chỉ khách sạn" Name="HotelAddress" @bind-Value=@hotel.HotelAddress  Class="w-100" AutoComplete="false" />
                                    <RadzenRequiredValidator Component="HotelAddress" Text="Vui lòng nhập địa chỉ" Popup="true" Style="position: absolute"/>
                                </div>
                            </div>
                            <div class="row mb-5">
                                <div class="col-md-4">
                                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Thêm dịch vụ cho khách sạn</RadzenText>
                                </div>
                                <div class="col">
                                    <RadzenDropDown Multiple="true" Chips="true" MaxSelectedLabels="20" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@services @bind-Value=@multipleValuesChip
                                    TextProperty="ServiceName" ValueProperty="ServiceId" Change=@(args => OnChangeDisabled(args)) Class="w-100" />
                                </div>
                            </div>
                            <div class="row mb-5">
                                <div class="col-md-4">
                                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Thêm ảnh cho khách sạn</RadzenText>
                                </div>
                                <div class="col">
                                    <input type="file" @ref=elementReference multiple/>
                                </div>
                            </div>
                            <div class="row mb-5">
                                <div class="col-md-4">
                                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Trạng thái phòng</RadzenText>
                                </div>
                                <div class="col">
                                    <RadzenRadioButtonList @bind-Value=hotel.HotelStatus Orientation="Orientation.Vertical" TValue="bool?">
                                        <Items>
                                            <RadzenRadioButtonListItem Text="Đang sử dụng" Value="true" TValue="bool?" />
                                            <RadzenRadioButtonListItem Text="Tạm ngưng sử dụng" Value="false" TValue="bool?" />
                                        </Items>
                                    </RadzenRadioButtonList>
                                </div>
                            </div>
                            <RadzenButton ButtonType="ButtonType.Submit" Text="Cập nhật" Click="UpdateHotel"></RadzenButton>
                        </RadzenFieldset>
                    </RadzenTemplateForm>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public int id{ get; set; }

    //Lưu ảnh
    ElementReference elementReference;
    string imagePath = "";
    string fileName = "";
    string type = "";
    string size = "";
    Stream fileStream = null;

    List<int> multipleValuesChip = new List<int>();

    //Service Hotel
    List<Service> services = new List<Service>();

    List<ShareModel.HotelServiceCs> hotelServiceCss = new List<ShareModel.HotelServiceCs>();
    Hotel_Custom hotel = new Hotel_Custom();
    User owner = new User();

    HotelService hotelService = new HotelService();
    UserService userService = new UserService();
    ImageService imageService = new ImageService();
    ImageHotelService imageHotelService = new ImageHotelService();
    ServiceService serviceService = new ServiceService();
    HotelServiceService hotelServiceService = new HotelServiceService();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var phone = await sessionStorage.GetItemAsync<string>("owner_phone");
            owner = await userService.GetUser(phone);
            var hotelTemp = await hotelService.GetHotel(id);
            hotel.HotelId = hotelTemp.HotelId;
            hotel.ProvinceId = hotelTemp.ProvinceId;
            hotel.DistrictId = hotelTemp.DistrictId;
            hotel.WardId = hotelTemp.WardId;
            hotel.HotelName = hotelTemp.HotelName;
            hotel.HotelAddress = hotelTemp.HotelAddress;
            hotel.HotelX = hotelTemp.HotelX;
            hotel.HotelY = hotelTemp.HotelY;
            hotel.UserPhone = hotelTemp.UserPhone;
            hotel.HotelStatus = hotelTemp.HotelStatus;
            services = await serviceService.GetAllServiceOfOwner(owner.UserPhone);
            hotelServiceCss = await hotelServiceService.GetAllHotelServiceOfHotel(hotel.HotelId);
            foreach (var item in hotelServiceCss)
            {
                multipleValuesChip.Add(item.ServiceId);
            }
            StateHasChanged();
        }
    }
    void OnChangeDisabled(object value)
    {
        if(multipleValuesChip != null)
        {
            multipleValuesChip.Clear();
            var str = value is IEnumerable<int> ? string.Join(", ", (IEnumerable<int>)value) : value;
            var temp = str.ToString().Split(",");
            if(temp.Length > 0)
            {
                foreach (var item in temp)
                {
                    multipleValuesChip.Add(int.Parse(item));
                }
                StateHasChanged();
            }
        }

    }
    protected async void UpdateHotel()
    {
        HotelService_Custom hotelService_Custom = new HotelService_Custom();
        hotelService_Custom.HotelId = hotel.HotelId;
        var resDel = await hotelServiceService.DeleteAllHotelServiceOfHotel(hotelService_Custom.HotelId);
        if(resDel == 1)
        {
            foreach (var item in multipleValuesChip)
            {
                try
                {
                    hotelService_Custom.ServiceId = item;
                    await hotelServiceService.AddHotelService(hotelService_Custom);
                }
                catch(Exception ex)
                {
                    Console.Write(ex.ToString());
                }
            }
        }
        var res = await hotelService.UpdateHotel(hotel);
        if (res != null)
        {
            UploadFileAsync(res);
        }
    }
    async Task UploadFileAsync(Hotel_Custom resHotel)
    {
        var files = (await fileReader.CreateReference(elementReference).EnumerateFilesAsync()).ToList();
        if (files == null)
            return;
        int checkAddImg = 0;
        foreach(var file in files)
        {
            var fileInfo = await file.ReadFileInfoAsync();
            fileName = fileInfo.Name;
            size = $"{fileInfo.Size}b";
            type = fileInfo.Type;

            using(var memoryStream = await file.CreateMemoryStreamAsync((int)fileInfo.Size))
            {
                fileStream = new MemoryStream(memoryStream.ToArray());
            }
            try
            {
                string fileNameNew = "";
                string url = "https://localhost:7129";
                var content = new MultipartFormDataContent();
                content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");
                string extension = Path.GetExtension(fileName);
                string[] allow = { ".jpg", ".png" };
                if (allow.Contains(extension.ToLower()))
                    fileNameNew = $"{Guid.NewGuid()}{extension}";
                content.Add(new StreamContent(fileStream, (int)fileStream.Length), "image", fileNameNew);
                var respone = await client.PostAsync($"{url}/api/Image/PostImage", content);
                if(respone.IsSuccessStatusCode){
                    //Thêm Image vào CSDL
                    var image = new Image();
                    image.ImageName = fileNameNew;
                    var resimg = await imageService.AddImage(image);
                    if(resimg != null)
                    {
                        ImageHotel_Custom imageHotel = new ImageHotel_Custom();
                        imageHotel.HotelId = resHotel.HotelId;
                        imageHotel.ImageId = resimg.ImageId;

                        try
                        {
                            var resImgHotel = await imageHotelService.AddImageHotel(imageHotel);
                            checkAddImg++;
                        }
                        catch(Exception ex)
                        {
                            Console.WriteLine(ex.ToString());
                        }
                    }
                }
            }
            catch(Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }
        }
        if(checkAddImg == files.Count){
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Thành công", Detail = "Sửa thành công", Duration = 4000 });
            this.DialogService.Close(true);
        }
    }
}
