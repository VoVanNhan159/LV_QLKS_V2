@page "/owner/orderroomdetail/{id:int}"
@layout Layout_Owner
@using Microsoft.AspNetCore.SignalR.Client
@using ShareModel;
@using ShareModel.Custom
@using System.Net.Mail

@if(orderroom.UserPhone != null)
{
    <div>
        <div class="section__content section__content--p30">
            <h3 style="text-align:center">Danh sách phòng được đặt</h3>
            <br />
            <p>Ngày nhận phòng: @DateTime.Parse(orderroom.OrderroomDatestart.ToString()).ToString("dd, MMMM, yyyy", new System.Globalization.CultureInfo("vi-VN"))</p>
            <p>Ngày trả phòng: @DateTime.Parse(orderroom.OrderroomDateend.ToString()).ToString("dd, MMMM, yyyy", new System.Globalization.CultureInfo("vi-VN"))</p>
            <br />
            <table class="table">
            <thead>
                <tr>
                    <th>
                        Tên phòng
                    </th>
                    <th>
                        Tầng
                    </th>
                    <th>
                        Sức chứa
                    </th>
                </tr>
            </thead>
            <tbody>
                @if(orderroomdetails.Count > 0 )
                {
                    foreach (var item in orderroomdetails)
                    {
                        <tr>
                            <td>
                                @item.Room.RoomName
                            </td>
                            <td>@GetFloor(item.Room.FloorId).FloorName</td>
                            <td>
                                @GetTypeofroom(item.Room.TorId).TorCapacity người
                            </td>
                        </tr>
                    }
                    <br />
                    @if(orderroom.OrderroomStatus == "1"){
                        <RadzenButton Click="ConfirmDelete" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Text="Xác nhận thanh toán"></RadzenButton>
                    }
                }
            </tbody>
        </table>
        </div>
    </div>
}


@code {
    [Parameter]
    public int id { get; set; }

    Orderroom orderroom = new Orderroom();
    List<Orderroomdetail> orderroomdetails = new List<Orderroomdetail>();
    List<Typeofroom> typeofrooms = new List<Typeofroom>();
    List<Floor> floors = new List<Floor>();

    OrderroomService orderroomService = new OrderroomService();
    OrderroomDetailService orderroomDetailService = new OrderroomDetailService();
    TypeOfRoomService typeOfRoomService = new TypeOfRoomService();
    HotelService hotelService = new HotelService();
    FloorService floorService = new FloorService();
    RoomService roomService = new RoomService();
    UserService userService = new UserService();
    //start hub
    private HubConnection hubConnection;
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/HotelBrHub"))
            .Build();
        await hubConnection.StartAsync();
    }

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    Task SendMessage() => hubConnection.SendAsync("SendMessage");
    //end hub
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender){
            try
            {
                orderroom = await orderroomService.GetOrderrom(id);
                orderroomdetails = await orderroomDetailService.GetAllOrderromDetailOfOrderrom(id);
                typeofrooms = await typeOfRoomService.GetAllTypeOfRoom();
                floors = await floorService.GetAllFloor();
                StateHasChanged();
            }
            catch(Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }
        }

    }
    protected Typeofroom GetTypeofroom(int id)
    {
        foreach (var item in typeofrooms)
        {
            if(item.TorId == id)
            {
                return item;
            }
        }
        return null;
    }
    protected Floor GetFloor(int id)
    {
        foreach (var item in floors)
        {
            if(item.FloorId == id)
            {
                return item;
            }
        }
        return null;
    }
    public async Task ConfirmDelete()
    {
        var confirmationResult = await this.DialogService.Confirm("Bạn có chắc thanh toán đơn đặt phòng này không? Sau khi xác nhận sẽ không thể hoàn tác.", "Thông báo", new ConfirmOptions { OkButtonText = "Xác nhận", CancelButtonText = "Trở về" });
        if (confirmationResult == true)
        {
            ConfirmPay();
        }
    }
    protected async void ConfirmPay()
    {

        var orderroomCustom = new Orderroom_Custom();
        orderroomCustom.OrderroomId = orderroom.OrderroomId;
        orderroomCustom.OrderroomDate = DateTime.Now;
        orderroomCustom.OrderroomDatestart = orderroom.OrderroomDatestart;
        orderroomCustom.OrderroomDateend = orderroom.OrderroomDateend;
        orderroomCustom.UserPhone = orderroom.UserPhone;
        orderroomCustom.OrderroomStatus = "2";
        orderroomCustom.OrderroomTotalprice = orderroom.OrderroomTotalprice;
        var res = await orderroomService.UpdateOrderroomAfterPayment(orderroomCustom);
        if(res != null)
        {
            SendMail(orderroomCustom);
            if (IsConnected)
                await SendMessage();
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Thành công", Detail = "Xác nhận thanh toán thành công", Duration = 4000 });
            this.DialogService.Close(res);
        }
    }
    private async void SendMail(Orderroom_Custom orderroom)
    {
        User user = new User();
        try
        {
            user = await userService.GetUser(orderroom.UserPhone);
            var orderroomdetails = await orderroomDetailService.GetAllOrderromDetailOfOrderrom(orderroom.OrderroomId);
            var room = await roomService.GetRoom(orderroomdetails.First().RoomId);
            using (MailMessage mail = new MailMessage())
            {
                mail.From = new MailAddress("vovannhan2727bc@outlook.com");
                mail.To.Add(user.UserEmail);
                mail.Subject = "Xác nhận đặt phòng";
                mail.Body = "Kính chào khách hàng: " + user.UserName.ToUpper();
                mail.Body += "<p>Chúng tôi xin xác nhận lại thông tin đặt phòng như sau:<p/>";
                mail.Body += "<p>Khách sạn: " + room.Hotel.HotelName + "</p>";
                mail.Body += "<p>Địa chỉ: " + hotelService.GetAddressHotel(room.Hotel.HotelId) + "</p>";
                
                mail.Body += "<table style=\"border: 1px solid black; border-collapse: collapse\">";
                mail.Body += "<thead>";
                mail.Body += "<tr>";
                mail.Body += "<th style=\"border:1px solid black\">Phòng</th>";
                mail.Body += "<th style=\"border:1px solid black\">Loại phòng</th>";
                mail.Body += "<th style=\"border:1px solid black\">Sức chứa</th>";
                mail.Body += "</tr>";
                mail.Body += "</thead>";
                mail.Body += "<tbody>";
                foreach (var item in orderroomdetails)
                {
                    var roomSendMail = await roomService.GetRoom(item.RoomId);
                    mail.Body += "<tr>";
                    mail.Body += "<td style=\"border:1px solid black\">" + roomSendMail.RoomName + "</td>";
                    mail.Body += "<td style=\"border:1px solid black\">" + roomSendMail.Tor.TorName + "</td>";
                    mail.Body += "<td style=\"border:1px solid black\">" + roomSendMail.Tor.TorCapacity + " người</td>";
                    mail.Body += "</tr>";
                }

                mail.Body += "<tbody>";

                mail.Body += "</table>";
                mail.Body += "<p>Ngày đặt: " + orderroom.OrderroomDate + "</p>";
                mail.Body += "<p>Ngày nhận phòng: " + orderroom.OrderroomDatestart + "</p>";
                mail.Body += "<p>Ngày trả phòng: " + orderroom.OrderroomDateend + "</p>";
                mail.Body += "<p>Tổng tiền: " + hotelService.FormatVND((int)orderroom.OrderroomTotalprice) + "</p>";
                mail.Body += "<p>Trạng thái thanh toán: Đã thanh toán thành công</p>";

                mail.Body += "<p>Xin cảm chân thành ơn quý khách hàng đã tin tưởng và sử dụng dịch vụ của chúng tôi</p>";

                mail.Body += "<br>Trân trọng,<br>";
                mail.IsBodyHtml = true;

                using (SmtpClient smtp = new SmtpClient("smtp.office365.com", 587))
                {
                    smtp.Credentials = new System.Net.NetworkCredential("vovannhan2727bc@outlook.com", "8vxzX$PS123");
                    smtp.EnableSsl = true;
                    smtp.Send(mail);
                }
            }
        }
        catch (Exception ex)
        {
            throw;
        }

    }
}
