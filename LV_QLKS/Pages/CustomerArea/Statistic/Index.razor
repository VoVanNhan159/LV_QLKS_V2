@page "/owner/statistic"
@using System.Globalization
@layout Layout_Owner
@inject NavigationManager NavigationManager
@inject IToastService toastService
@inject IJSRuntime JS
@inject DialogService DialogService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<div class="main-content">
                <div class="section__content section__content--p30">
                    <div class="container-fluid">
                        <div class="row m-t-25">
                            <div class="col-sm-6 col-lg-3">
                                <div class="overview-item overview-item--c1">
                                    <div class="overview__inner">
                                        <div class="overview-box clearfix">
                                            <div class="icon">
                                                <i class="zmdi zmdi-home"></i>
                                                <div class="text">
                                                    <h2>@hotels.Count</h2>
                                                </div>
                                            </div>
                                            <div class="text">
                                                <br />
                                                <span>Tổng số Khách sạn</span>
                                            </div>
                                        </div>
                                        <div class="overview-chart">
                                            <canvas id="widgetChart2"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-6 col-lg-3">
                                <div class="overview-item overview-item--c2">
                                    <div class="overview__inner">
                                        <div class="overview-box clearfix">
                                            <div class="icon">
                                                <i class="zmdi zmdi-shopping-cart"></i>
                                                <div class="text">
                                                    <h2>@orderroomCarts.Count</h2>
                                            </div>
                                            </div>
                                            <div class="text">
                                                <br />
                                                <span>Tổng số lượng giỏ hàng</span>
                                            </div>
                                        </div>
                                        <div class="overview-chart">
                                            <canvas id="widgetChart2"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-6 col-lg-3">
                                <div class="overview-item overview-item--c3">
                                    <div class="overview__inner">
                                        <div class="overview-box clearfix">
                                            <div class="icon">
                                                <i class="zmdi zmdi-calendar-note"></i>
                                                <div class="text">
                                                    <h2>@orderroomReceipts.Count</h2>
                                                </div>
                                            </div>
                                            <div class="text">
                                                <br />
                                                <span>Tổng số lượng đơn đặt phòng</span>
                                            </div>
                                        </div>
                                        <div class="overview-chart">
                                            <canvas id="widgetChart3"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-6 col-lg-3">
                                <div class="overview-item overview-item--c4">
                                    <div class="overview__inner">
                                        <div class="overview-box clearfix">
                                            <div class="icon">
                                                <i class="zmdi zmdi-money"></i>
                                                 <div class="text">
                                                    <h3 style="color:#fff;font-size: 20px;">@hotelService.FormatVND((int)orderroomReceipts.Sum(or=>or.OrderroomTotalprice))</h3>
                                                </div>
                                            </div>
                                            <div class="text">
                                                <br />
                                                <span>Tổng giá trị đơn đặt phòng</span>
                                            </div>
                                        </div>
                                        <div class="overview-chart">
                                            <canvas id="widgetChart4"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <RadzenCard>
                            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H4" Class="my-4">
                            Thống kê doanh thu
                        </RadzenText>
                            <div class="container">
                                <div class="row">
                                    <div class="col-sm-12 my-5">
                                        <RadzenCard Class="w-100 mb-4" Style="display: flex; align-items: center; gap: 0.5rem" >
                                            <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels"></RadzenCheckBox>
                                            <RadzenLabel Text="Hiện giá tiền" For="dataLabels" />
                                            <RadzenDropDown AllowClear="true" TValue="int" Class="w-25" Data=@(chooses) TextProperty="name" ValueProperty="value" Change=@(args => OnChange(args)) />
                                            <RadzenNumeric Visible=monthCheck @bind-Value="@monthValue" Class="w-25" Min="1" Max="12" Name="month" TValue="int" Change="MonthChange"></RadzenNumeric>
                                            <RadzenLabel Visible=monthCheck Text="Chọn tháng" For="month" />
                                            <RadzenNumeric Visible=monthCheck @bind-Value="@yearValue" Class="w-25" Max="DateTime.Today.Year" Name="year" TValue="int" Change="YearChange"></RadzenNumeric>
                                            <RadzenLabel Visible=monthCheck Text="Chọn năm" For="year" />
                                            <RadzenNumeric Visible=quarterCheck @bind-Value="@yearValue" Class="w-25" Max="DateTime.Today.Year" Name="year" TValue="int" Change="YearChange"></RadzenNumeric>
                                            <RadzenLabel Visible=quarterCheck Text="Chọn năm" For="year" />
                                            <RadzenNumeric Visible=yearCheck @bind-Value="@yearValue" Class="w-25" Max="DateTime.Today.Year" Name="year" TValue="int" Change="YearChange"></RadzenNumeric>
                                            <RadzenLabel Visible=yearCheck Text="Chọn năm" For="year" />
                                        </RadzenCard>
                                            @if (yearCheck == true)
                                            {
                                                List<ValueOfYear> valueYears = new List<ValueOfYear>();
                                                var valueYearList = valueOfYears.Where(vom => vom.year == yearValue).ToList();
                                                valueYears.AddRange(valueYearList);
                                                if(valueYears.Count > 0)
                                                {
                                                    <RadzenChart>
                                                        <RadzenLineSeries Smooth="@smooth" Data="@valueYears" CategoryProperty="date" Title="@valueYears.First().year.ToString()" ValueProperty="value">
                                                            <RadzenMarkers MarkerType="MarkerType.Circle" />
                                                            <RadzenSeriesDataLabels Visible="@showDataLabels" />
                                                        </RadzenLineSeries>
                                                        <RadzenCategoryAxis Padding="20" Formatter="@FormatAsMonth" />
                                                        <RadzenValueAxis Formatter="@FormatAsVND">
                                                            <RadzenGridLines Visible="true" />
                                                            <RadzenAxisTitle Text="Doanh thu" />
                                                        </RadzenValueAxis>
                                                    </RadzenChart>
                                                }
                                            } 
                                            else if (monthCheck == true)
                                            {
                                                List<ValueOfMonth> valueMonths = new List<ValueOfMonth>();
                                                var valueYearList = valueOfMonths.Where(vom => vom.year == yearValue && vom.month == monthValue).ToList();
                                                valueMonths.AddRange(valueYearList);
                                                if(valueMonths.Count > 0)
                                                {
                                                    <RadzenChart>
                                                        <RadzenLineSeries Smooth="@smooth" Data="@valueMonths" CategoryProperty="date" Title="@("Tháng "+valueMonths.First().month.ToString())" ValueProperty="value">
                                                            <RadzenMarkers MarkerType="MarkerType.Circle" />
                                                            <RadzenSeriesDataLabels Visible="@showDataLabels" />
                                                        </RadzenLineSeries>
                                                        <RadzenCategoryAxis Padding="20" Formatter="@FormatAsDay" />
                                                        <RadzenValueAxis Formatter="@FormatAsVND">
                                                            <RadzenGridLines Visible="true" />
                                                            <RadzenAxisTitle Text="Doanh thu" />
                                                        </RadzenValueAxis>
                                                    </RadzenChart>
                                                }
                                            }
                                            else if (quarterCheck == true)
                                            {
                                                List<ValueOfYear> valueYears = new List<ValueOfYear>();
                                                List<ValueOfQuarter> valueOfQuarters = new List<ValueOfQuarter>();
                                                var valueYearList = valueOfYears.Where(vom => vom.year == yearValue).ToList();
                                                foreach (var item in valueYearList)
                                                {
                                                    if(item.month >= 1 && item.month <= 3 )
                                                    {
                                                        var valueOfQuater = new ValueOfQuarter();
                                                        valueOfQuater.date = item.year +"-1-01";
                                                        valueOfQuater.quarter = 1;
                                                        valueOfQuater.year = item.year;
                                                        valueOfQuater.value = item.value;

                                                        if(valueOfQuarters.Select(voq=>voq.date).Contains(valueOfQuater.date))
                                                        {
                                                            var quarterTemp = valueOfQuarters.First(voq=>voq.date == valueOfQuater.date);
                                                            valueOfQuarters.Remove(quarterTemp);
                                                            quarterTemp.value += valueOfQuater.value;
                                                            valueOfQuarters.Add(quarterTemp);
                                                        }
                                                        else
                                                            valueOfQuarters.Add(valueOfQuater);
                                                    }
                                                    else if(item.month >= 4  && item.month <=  6)
                                                    {
                                                        var valueOfQuater = new ValueOfQuarter();
                                                        valueOfQuater.date = item.year +"-2-01";
                                                        valueOfQuater.quarter = 2;
                                                        valueOfQuater.year = item.year;
                                                        valueOfQuater.value = item.value;

                                                        if(valueOfQuarters.Select(voq=>voq.date).Contains(valueOfQuater.date))
                                                        {
                                                            var quarterTemp = valueOfQuarters.First(voq=>voq.date == valueOfQuater.date);
                                                            valueOfQuarters.Remove(quarterTemp);
                                                            quarterTemp.value += valueOfQuater.value;
                                                            valueOfQuarters.Add(quarterTemp);
                                                        }
                                                        else
                                                            valueOfQuarters.Add(valueOfQuater);
                                                    }
                                                    else if(item.month >= 7  && item.month <=  9)
                                                    {
                                                        var valueOfQuater = new ValueOfQuarter();
                                                        valueOfQuater.date = item.year +"-3-01";
                                                        valueOfQuater.quarter = 3;
                                                        valueOfQuater.year = item.year;
                                                        valueOfQuater.value = item.value;

                                                        if(valueOfQuarters.Select(voq=>voq.date).Contains(valueOfQuater.date))
                                                        {
                                                            var quarterTemp = valueOfQuarters.First(voq=>voq.date == valueOfQuater.date);
                                                            valueOfQuarters.Remove(quarterTemp);
                                                            quarterTemp.value += valueOfQuater.value;
                                                            valueOfQuarters.Add(quarterTemp);
                                                        }
                                                        else
                                                            valueOfQuarters.Add(valueOfQuater);
                                                    }
                                                    else
                                                    {
                                                        var valueOfQuater = new ValueOfQuarter();
                                                        valueOfQuater.date = item.year +"-4-01";
                                                        valueOfQuater.quarter = 4;
                                                        valueOfQuater.year = item.year;
                                                        valueOfQuater.value = item.value;

                                                        if(valueOfQuarters.Select(voq=>voq.date).Contains(valueOfQuater.date))
                                                        {
                                                            var quarterTemp = valueOfQuarters.First(voq=>voq.date == valueOfQuater.date);
                                                            valueOfQuarters.Remove(quarterTemp);
                                                            quarterTemp.value += valueOfQuater.value;
                                                            valueOfQuarters.Add(quarterTemp);
                                                        }
                                                        else
                                                            valueOfQuarters.Add(valueOfQuater);
                                                    }
                                                        
                                                }
                                                valueOfQuarters = valueOfQuarters.OrderBy(voq=>voq.quarter).ToList();
                                                if(valueOfQuarters.Count > 0)
                                                {
                                                    <RadzenChart>
                                                        <RadzenLineSeries Smooth="@smooth" Data="@valueOfQuarters" CategoryProperty="date" Title="@valueOfQuarters.First().year.ToString()" ValueProperty="value">
                                                            <RadzenMarkers MarkerType="MarkerType.Circle" />
                                                            <RadzenSeriesDataLabels Visible="@showDataLabels" />
                                                        </RadzenLineSeries>
                                                        <RadzenCategoryAxis Padding="20" Formatter="@FormatAsQuarter" />
                                                        <RadzenValueAxis Formatter="@FormatAsVND">
                                                            <RadzenGridLines Visible="true" />
                                                            <RadzenAxisTitle Text="Doanh thu" />
                                                        </RadzenValueAxis>
                                                    </RadzenChart>
                                                }
                                            }
                                            else if(valueOfYears.Count > 0)
                                            {
                                                <RadzenChart>
                                                    @for (var i = 19; i <= 22; i++)
                                                    {
                                                        List<ValueOfYear> valueYearsTemp = new List<ValueOfYear>();
                                                        List<ValueOfYear> valueYears = new List<ValueOfYear>();
                                                        var valueYearList = valueOfYears.Where(vom => vom.year.ToString() == "20"+i).ToList();
                                                        valueYearsTemp.AddRange(valueYearList);
                                                        foreach(var item in valueYearsTemp)
                                                        {
                                                            item.date = FormatYear(item.date);
                                                            valueYears.Add(item);
                                                        }
                                                        if(valueYears.Count > 0 && i == 22)
                                                        {
                                                            <RadzenLineSeries Smooth="@smooth" Data="@valueYears" CategoryProperty="date" Title="@valueYears.First().year.ToString()" ValueProperty="value">
                                                                <RadzenMarkers MarkerType="MarkerType.Circle" />
                                                                <RadzenSeriesDataLabels Visible="@showDataLabels" />
                                                            </RadzenLineSeries>
                                                        }
                                                        else if(valueYears.Count > 0)
                                                        {
                                                            <RadzenLineSeries Smooth="@smooth" Data="@valueYears" CategoryProperty="date" LineType="LineType.Dashed" Title="@valueYears.First().year.ToString()" ValueProperty="value">
                                                                <RadzenMarkers MarkerType="MarkerType.Circle" />
                                                                <RadzenSeriesDataLabels Visible="@showDataLabels" />
                                                            </RadzenLineSeries>
                                                        }
                                                    
                                                    }
                                                    <RadzenCategoryAxis Padding="30" Formatter="@FormatAsMonthYear" />
                                                    <RadzenValueAxis Formatter="@FormatAsVND">
                                                        <RadzenGridLines Visible="true" />
                                                        <RadzenAxisTitle Text="Doanh thu" />
                                                    </RadzenValueAxis>
                                                </RadzenChart>
                                            }
                                        
                                    </div>
                                </div>
                            </div>
                        </RadzenCard>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="copyright">
                                    <p>Copyright © 2018 Colorlib. All rights reserved. Template by <a href="https://colorlib.com">Colorlib</a>.</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
@code {
    //Check thống kê theo
    bool monthCheck = false;
    bool quarterCheck = false;
    bool yearCheck = false;

    //Lưu các giá trị cần thống kê
    int monthValue = 1;
    int quarterValue = 1;
    int yearValue = DateTime.Today.Year;


    bool smooth = true;
    bool showDataLabels = false;
    string phone = string.Empty;
    User owner = new User();
    List<User> users = new List<User>();
    List<Hotel> hotels = new List<Hotel>();
    List<Orderroom> orderroomCarts = new List<Orderroom>();
    List<Orderroom> orderroomReceipts = new List<Orderroom>();
    List<Orderroom> orderrooms = new List<Orderroom>();

    UserService userService = new UserService();
    HotelService hotelService = new HotelService();
    OrderroomService orderroomService = new OrderroomService();

    protected override async Task OnInitializedAsync()
    {

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            phone = await sessionStorage.GetItemAsync<string>("owner_phone");
            owner = await userService.GetUser(phone);
            hotels = await hotelService.GetAllHotelOfOwner(owner.UserPhone);
            orderrooms = await orderroomService.GetAllOrderroomOfOwner(owner.UserPhone);
            foreach (var item in orderrooms)
            {
                if (item.OrderroomStatus == "3")
                    orderroomCarts.Add(item);
                else
                    orderroomReceipts.Add(item);
            }
            InitAllList();
            foreach (var item in orderroomReceipts)
            {
                if(valueOfYears.Select(vom => vom.year).Contains(item.OrderroomDate.Value.Year))
                {
                    var ValueOfYear = valueOfYears.First(vom => vom.month == item.OrderroomDate.Value.Month && vom.year == item.OrderroomDate.Value.Year);
                    valueOfYears.Remove(ValueOfYear);
                    ValueOfYear.value += (double)item.OrderroomTotalprice;
                    valueOfYears.Add(ValueOfYear);
                }
            }
            valueOfYears = valueOfYears.OrderBy(vom=>vom.year).ThenBy(vom => vom.month).ToList();
            StateHasChanged();
        }
    }
    void MonthChange()
    {
        valueOfMonths.Clear();
        InitAllList();
        //Thống kê theo tháng
        foreach (var item in orderroomReceipts)
        {
            if(valueOfMonths.Select(vom=>vom.month).Contains(item.OrderroomDate.Value.Month) && valueOfMonths.Select(vom => vom.year).Contains(item.OrderroomDate.Value.Year))
            {
                var ValueOfMonth = valueOfMonths.First(vom => vom.month == item.OrderroomDate.Value.Month && vom.year == item.OrderroomDate.Value.Year && vom.day == item.OrderroomDate.Value.Day);
                var temp = ValueOfMonth;
                valueOfMonths.Remove(ValueOfMonth);
                temp.value = (double)item.OrderroomTotalprice;
                valueOfMonths.Add(temp);
            }
        }
        valueOfMonths = valueOfMonths.OrderBy(vom=>vom.month).ThenBy(vom => vom.day).ToList();
        StateHasChanged();
    }
    void QuarterChange()
    {
        //YearChange();
    }
    void YearChange()
    {
        valueOfYears.Clear();
        InitAllList();
        foreach (var item in orderroomReceipts)
        {
            if(valueOfYears.Select(vom=>vom.month).Contains(item.OrderroomDate.Value.Month) && valueOfYears.Select(vom => vom.year).Contains(item.OrderroomDate.Value.Year))
            {
                var ValueOfYear = valueOfYears.First(vom => vom.month == item.OrderroomDate.Value.Month && vom.year == item.OrderroomDate.Value.Year);
                valueOfYears.Remove(ValueOfYear);
                ValueOfYear.value += (double)item.OrderroomTotalprice;
                valueOfYears.Add(ValueOfYear);
            }
        }
        valueOfYears = valueOfYears.OrderBy(vom=>vom.year).ThenBy(vom => vom.month).ToList();
    }
    void OnChange(object value)
    {
        if (value != null)
            if (value.ToString() == "0")
            {
                monthCheck = false;
                yearCheck = false;
                quarterCheck = false;
            }
            else if (value.ToString() == "1")
            {
                monthCheck = true;
                yearCheck = false;
                quarterCheck = false;
            }
            else if (value.ToString() == "2")
            {
                quarterCheck = true;
                yearCheck = false;
                monthCheck = false;
            }
            else
            {
                yearCheck = true;
                monthCheck = false;
                quarterCheck = false;
            }

    }
    //Tính doanh thu của tháng
    class ValueOfYear
    {
        public int month{ get; set; }
        public int year{ get; set; }
        public double value{ get; set; }
        public string date{ get; set; }
    }
    List<ValueOfYear> valueOfYears = new List<ValueOfYear>();
    class ValueOfQuarter
    {
        public int quarter{ get; set; }
        public int year{ get; set; }
        public double value{ get; set; }
        public string date{ get; set; }
    }
    List<ValueOfQuarter> valueOfQuarters = new List<ValueOfQuarter>();
    class ValueOfMonth
    {
        public int day{ get; set; }
        public int month{ get; set; }
        public int year{ get; set; }
        public double value{ get; set; }
        public string date{ get; set; }
    }
    List<ValueOfMonth> valueOfMonths = new List<ValueOfMonth>();
    class Choose
    {
        public string name{ get; set; }
        public int value{ get; set; }
    }
    List<Choose> chooses = new List<Choose>()
    {
        new Choose
        {
            name = "Thống kê theo tháng",
            value = 1
        },
        new Choose
        {
            name = "Thống kê theo quý",
            value = 2
        },
        new Choose
        {
            name = "Thống kê theo năm",
            value = 3
        }
    };

    string FormatAsVND(object value)
    {
        return ((double)value).ToString("C0", CultureInfo.CreateSpecificCulture("vi-VN"));
    }

    string FormatAsMonth(object value)
    {
        if (value != null)
        {
            return Convert.ToDateTime(value).ToString("TMM", CultureInfo.CreateSpecificCulture("vi-VN"));
        }

        return string.Empty;
    }
    string FormatAsMonthYear(object value)
    {
        if (value != null)
        {
            string yearTemp = "2022";
            string[] stringsplit = value.ToString().Split("-");
            string stringRes = yearTemp + "-" + stringsplit[1] + "-" + stringsplit[2];
            return Convert.ToDateTime(stringRes).ToString("TMM", CultureInfo.CreateSpecificCulture("vi-VN"));
        }

        return string.Empty;
    }
    string FormatYear(object value)
    {
        if (value != null)
        {
            string yearTemp = "2022";
            string[] stringsplit = value.ToString().Split("-");
            string stringRes = yearTemp + "-" + stringsplit[1] + "-" + stringsplit[2];
            return stringRes;
        }

        return string.Empty;
    }
    string FormatAsQuarter(object value)
    {
        if (value != null)
        {
            return Convert.ToDateTime(value).ToString("QMM", CultureInfo.CreateSpecificCulture("vi-VN"));
        }

        return string.Empty;
    }
    string FormatAsDay(object value)
    {
        if (value != null)
        {
            var res =  Convert.ToDateTime(value).ToString("dd", CultureInfo.CreateSpecificCulture("vi-VN"));
            return res;
        }

        return string.Empty;
    }
    protected void InitAllList()
    {
        for (var i = 2018; i <= DateTime.Today.Year; i++){
            for (var j = 1; j < 13; j++)
            {
                var tempYear = new ValueOfYear();
                tempYear.month = j;
                tempYear.year = i;
                tempYear.value = 0;
                tempYear.date = i + "-" + j + "-01";
                valueOfYears.Add(tempYear);
            }
        }
        for (var i = 2018; i <= DateTime.Today.Year; i++){
            for (var k = 1; k < 5; k++)
            {
                var tempQuarter = new ValueOfQuarter();
                tempQuarter.quarter = k;
                tempQuarter.year = i;
                tempQuarter.value = 0;
                tempQuarter.date = i + "-" + k + "-01";
                valueOfQuarters.Add(tempQuarter);
            }
        }
        for (var i = 2018; i <= DateTime.Today.Year; i++){
            for (var j = 1; j < 13; j++)
            {
                List<int> dayTemp;
                if (j == 1 || j == 3 || j == 5 || j == 7 || j == 8 || j == 10 || j == 12)
                    dayTemp = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 };
                else if(j == 4 || j == 6 || j == 9 || j == 11)
                    dayTemp = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 };
                else
                {
                    if(i % 400 == 0)
                        dayTemp = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29};
                    else
                        dayTemp = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28 };
                }
                foreach (var item in dayTemp)
                {
                    try{
                        var tempMonth = new ValueOfMonth();
                        tempMonth.month = j;
                        tempMonth.year = i;
                        tempMonth.value = 0;
                        var temp = i + "-" + j + "-" + item;
                        tempMonth.date = temp;
                        tempMonth.day = item;
                        valueOfMonths.Add(tempMonth);
                    }catch(Exception ex){
                        Console.Write(ex.ToString());
                    }
                }
            }
        }
    }
}
