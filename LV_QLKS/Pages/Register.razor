@page "/register"
@using System.Text.RegularExpressions
@using ShareModel
@using System.Text
@using System.Security.Cryptography

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<section class="">
  <div class="container-fluid h-custom">
    <div class="row">
      <div class="col col-lg-6">
        <img src="/home/images/background/signin-signup.webp" alt="Sample image">
          <br />
          <br />
        <div class="form-outline mb-4" style="text-align: center;">
          Hoặc đăng nhập bằng
          <div class="login100-social-item">
              <a href="https://localhost:7129/api/auth/google-login">
                  <img style="width:7%;height:7%" src="/home/images/google.png" />
              </a>
              <a href="https://localhost:7129/api/auth/facebook-login">
                  <img style="width:7%;height:7%" src="/home/images/facebook.jpg" />
              </a>
          </div>
      </div>
        </div>
      <div class="col col-lg-6">
          <!-- Email input -->
          <div class="form-outline mb-4">
              <label class="form-label" for="form3Example3">Tên đăng nhập</label>
            <RadzenTextBox @bind-Value="acc.AccountUsername" Name="AccountUsername" style="display: block" id="form3Example3" class="form-control form-control-lg" placeholder="Vui lòng nhập tên đăng nhập" />
            <RadzenRequiredValidator Component="AccountUsername" Text="Vui lòng nhập tên đăng nhập" Popup="true" Style="position: absolute"/>
          </div>

          <!-- Password input -->
          <div class="form-outline mb-3">
            <label class="form-label" for="form3Example4">Mật khẩu</label>
            <RadzenPassword @bind-Value="acc.AccountPassword" Visible="@(passwordVisible == false)" Name="AccountPassword" style="display: block" id="form3Example4" class="form-control form-control-lg" placeholder="Nhập mật khẩu" />
            <RadzenTextBox @bind-Value="acc.AccountPassword" Visible="@passwordVisible" Name="AccountPassword" style="display: block" id="form3Example4" class="form-control form-control-lg" placeholder="Nhập mật khẩu" />
          </div>
          <div class="form-outline mb-3">
            <label class="form-label" for="form3Example4">Nhập lại mật khẩu</label>
            <RadzenPassword @bind-Value="passwordTwo" Visible="@(passwordVisible == false)" Name="AccountPassword" style="display: block" id="form3Example44" class="form-control form-control-lg" placeholder="Nhập mật khẩu" />
            <RadzenTextBox @bind-Value="passwordTwo" Visible="@passwordVisible" Name="AccountPassword" style="display: block" id="form3Example4" class="form-control form-control-lg" placeholder="Nhập mật khẩu" />
          </div>

          <div class="d-flex justify-content-between align-items-center">
            <!-- Checkbox -->
            <div class="form-check mb-0">
              <input class="form-check-input me-2" type="checkbox" @bind="passwordVisible" value="" id="form2Example3" />
              <label class="form-check-label" for="form2Example3">
                Hiện mật khẩu
              </label>
            </div>
          </div>
          <div class="form-outline mb-4">
              <label class="form-label" >Lựa chọn quyền sử dụng</label>
            <select class="form-control" @bind="acc.ToaId">
                <option value="2" selected>Chủ khách sạn</option>
                <option value="3">Người dùng</option>
            </select>
          </div>
          <div class="text-center text-lg-start mt-4 pt-2">
            <button type="button" class="btn btn-primary btn-lg"
              style="padding-left: 2.5rem; padding-right: 2.5rem;" @onclick="CheckRegister">Đăng ký</button>
          </div>
      </div>
    </div>
  </div>
</section>


	
@code {
    private string passwordTwo = "";
    bool passwordVisible = false;

    Account acc = new Account();
    List<Typeofaccount> typeofaccounts = new List<Typeofaccount>();


    AccountService accountService = new AccountService();
    TypeOfAccountService typeOfAccountService = new TypeOfAccountService();

    protected override async Task OnInitializedAsync()
    {
        acc.ToaId = 2;
        typeofaccounts = await typeOfAccountService.GetAllTypeOfAccount();
    }

    public static bool IsPhoneNumber(string number)
    {
        if (number == null)
            return false;
        try{
            string temp = number.Substring(0, 2);
            if(temp == "09" || temp == "03" ||temp == "07" ||temp == "08" ||temp == "05")
            {
                if (number.Length == 10) return true;
            }
            return false;
        }catch(Exception e)
        {
            return false;
        }
    }

    public async void CheckRegister()
    {
        if (IsPhoneNumber(acc.AccountUsername))
        {
            if (acc.AccountUsername == null)
            {
                await JS.InvokeVoidAsync("eval", $@"document.getElementById(""form3Example3"").focus()");
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Thông báo", Detail = "Bạn chưa nhập số điện thoại", Duration = 4000 });
            }else if (acc.AccountPassword == null)
            {
                await JS.InvokeVoidAsync("eval", $@"document.getElementById(""form3Example4"").focus()");
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Thông báo", Detail = "Bạn chưa mật khẩu", Duration = 4000 });
            }else if (passwordTwo != acc.AccountPassword)
            {
                await JS.InvokeVoidAsync("eval", $@"document.getElementById(""form3Example44"").focus()");
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Thông báo", Detail = "Mật khẩu không khớp", Duration = 4000 });
            }
            else if(acc.AccountPassword.ToString().Length < 5)
            {
                await JS.InvokeVoidAsync("eval", $@"document.getElementById(""form3Example4"").focus()");
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Thông báo", Detail = "Mật khẩu phải ít nhất 5 ký tự", Duration = 4000 });
            }else
            {
                try{
                    if((await CheckAccInDB(acc.AccountUsername)) == false)
                    {
                        await JS.InvokeVoidAsync("eval", $@"document.getElementById(""form3Example3"").focus()");
                        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Thông báo", Detail = "Số điện thoại đã được đăng ký, vui lòng chọn số điện thoại khác", Duration = 4000 });
                    }
                    else
                    {
                        acc.AccountPassword = Encrypt(acc.AccountPassword);
                        // Thêm loại tài khoản
                        var toa = await typeOfAccountService.GetTypeOfAccount(acc.ToaId);
                        acc.Toa = toa;

                        try
                        {
                            var account = await accountService.AddAccount(acc);
                            if(account != null)
                            {
                                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Thành công", Detail = "Đăng ký thành công", Duration = 4000 });
                                Thread.Sleep(500);
                                this.DialogService.Close();
                                if (account.ToaId == 2)
                                {
                                    await sessionStorage.SetItemAsync<string>("owner_phone",account.AccountUsername);
                                    NavigationManager.NavigateTo("/owner/index");
                                }
                                else
                                {
                                    await sessionStorage.SetItemAsync<string>("customer_phone",account.AccountUsername);
                                    NavigationManager.NavigateTo("/customer/index");
                                }
                            }
                        }
                        catch(Exception x)
                        {
                            Console.WriteLine(x);
                        }
                    }
                }
                catch(Exception ex)
                {
                    

                }
            }
        }
        else
        {
            if(acc.AccountUsername == null)
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Thông báo", Detail = "Bạn chưa nhập số điện thoại", Duration = 4000 });
            else
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Thông báo", Detail = "Số điện thoại không hợp lệ", Duration = 4000 });
            await JS.InvokeVoidAsync("eval", $@"document.getElementById(""form3Example3"").focus()");
        }
    }
    public async Task<bool> CheckAccInDB(string phone)
    {
        if (await accountService.CheckAccount(phone) == null)
            return true;
        else
            return false;
    }

    public static readonly string key = "Luanvantotngiep";
    public static string Encrypt(string text)
    {
        using (var md5 = new MD5CryptoServiceProvider())
        {
            using (var tdes = new TripleDESCryptoServiceProvider())
            {
                tdes.Key = md5.ComputeHash(UTF8Encoding.UTF8.GetBytes(key));
                tdes.Mode = CipherMode.ECB;
                tdes.Padding = PaddingMode.PKCS7;

                using (var transform = tdes.CreateEncryptor())
                {
                    byte[] textBytes = UTF8Encoding.UTF8.GetBytes(text);
                    byte[] bytes = transform.TransformFinalBlock(textBytes, 0, textBytes.Length);
                    return Convert.ToBase64String(bytes, 0, bytes.Length);
                }
            }
        }
    }
}
