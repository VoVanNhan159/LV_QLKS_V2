@page "/bookroom"
@using LV_QLKS.Data
@using LV_QLKS.Service
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.WebUtilities
@using ShareModel
@using Microsoft.Extensions.Configuration
@using ShareModel.Custom
@using System.Net.Mail
@inject IConfiguration Configuration
@layout Layout_Null

    <link rel="stylesheet" href="/book/smart-forms.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">	 

    <div class="container">
        <div class="main-cn bg-white clearfix">
                    <div class="step">
                        <!-- Step -->
                        <ul class="payment-step text-center clearfix">
                            <li class="step-select">
                                <span>1</span>
                                <p>Chọn phòng</p>
                            </li>
                            <li class="step-part">
                                <span>2</span>
                                <p>Chi tiết đơn đặt phòng & Thanh toán</p>
                            </li>
                            <li>
                                <span>3</span>
                                <p>Đặt phòng thành công!</p>
                            </li>
                        </ul>
                        <!-- ENd Step -->
                    </div>
                    <style>
                        .span-custom{
                            font-weight: bold;
                            padding-right: 10px;
                        }
                    </style>
                    <!-- Payment Room -->
                    @if(room.RoomId != 0)
                    {
                        <div class="payment-room">
                                    <div class="row">
                                        <div class="col-lg-6">
                                            <div class="payment-infor">
                                                <h2>@hoTel.HotelName</h2>
                                                <span class="star-room">
                                                    @{
                                                        double starTemph = GetStartOfHotel(hoTel.HotelId);
                                                        int temph = (int)starTemph;
                                                        for(int i = 0; i < temph; i++)
                                                        {
                                                                                    <i class="glyphicon glyphicon-star"></i>
                                                        }
                                                        if(starTemph - (double) temph > 0)
                                                        {
                                                                                     <i class="glyphicon glyphicon-star half"></i>
                                                        }
                                                    }
                                                </span>
                                                <ul style="list-style: none;padding: initial;">
                                                    <li>
                                                        <span class="span-custom">Địa chỉ:</span>
                                                        @addressHotel
                                                    </li>
                                                    <li>
                                                        <span class="span-custom">Ngày nhận phòng:</span>
                                                        @if(dayStartFilter != null){
                                                            @DateTime.Parse(dayStartFilter).ToString("dd, MMMM, yyyy", new System.Globalization.CultureInfo("vi-VN"))
                                                        }
                                                        
                                                    </li>
                                                    <li>
                                                        <span class="span-custom">Ngày trả phòng:</span>
                                                        @if(dayEndFilter != null){
                                                            @DateTime.Parse(dayEndFilter).ToString("dd, MMMM, yyyy", new System.Globalization.CultureInfo("vi-VN"))
                                                        }
                                                    </li>
                                                    <li>
                                                        <span class="span-custom">Thời gian lưu trú:</span>
                                                        @totalDay đêm, tối đa @room.Tor.TorCapacity người lớn
                                                    </li>
                                                    <li>
                                                        <span class="span-custom">Phòng:</span>
                                                        @room.RoomName
                                                    </li>
                                                </ul>   
                                            </div>
                                        </div>
                                        <div class="col-lg-6">
                                            <div class="payment-price">

                                                <figure>
                                                    @{
                                                        try{
                                                                        <img src="/images/@urlImageRoom" alt="@urlImageRoom">
                                                        }
                                                        catch(Exception ex)
                                                        {
                                                            Console.WriteLine(ex.ToString());
                                                        }
                                                    } 
                                                </figure>
                                                <div class="total-trip">
                                                    <span>
                                                        @hotelService.FormatVND(int.Parse(torPrice))<small>/đêm</small> x @totalDay đêm
                                                    </span>
                                       
                                                    <p>
                                                        Tạm tính: <ins>@hotelService.FormatVND((int)@totalPrice)</ins> - <ins>giảm @GetPercentOfRoom(room)%</ins>
                                                        <br />
                                                        Tổng tiền: <ins>@hotelService.FormatVND((int)@totalPriceDiscount)</ins>
                                                    </p>
                                                </div>
                                            </div>   
                                        </div>
                                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Lựa chọn hình thức thanh toán</RadzenText>
                                            <RadzenRadioButtonList @bind-Value=@tt Orientation="Orientation.Vertical" TValue="int">
                                                <Items>
                                                    <RadzenRadioButtonListItem Text="Thanh toán khi nhận phòng" Value="1" TValue="int" />
                                                    <RadzenRadioButtonListItem Text="Thanh toán trực tuyến" Value="2" TValue="int" />
                                                </Items>
                                            </RadzenRadioButtonList>
                                        <br />
                                        <div class="section colm colm6" style="padding-bottom:10px;">
                                            <input type="checkbox" value=@isChecked @onchange=CheckTerms/> Tôi đồng ý với <a @onclick="ShowPolicy" style="font-style:italic;color:blue;cursor:pointer">"Chính sách và điều khoản dịch vụ"</a>
                                        </div>
                                        <div class="form-footer">
                                            <input type="submit" class="btn btn-success" value="Xác nhận đặt phòng" @onclick=BookRoomOrder disabled="@disable"/>
                                            <input type="reset" class="btn btn-light" value="Trở về" @onclick="CancelModal"/> 
                                        </div>
                                    </div>
                                </div>
                    }
                </div>
    </div>
@code{
    [Parameter]
    public UserInfo UserInfo { get; set; }

    private IJSObjectReference module;
    UserService userService = new UserService();
    RoomService roomService = new RoomService();
    HotelService hotelService = new HotelService();
    OrderroomService orderroomService = new OrderroomService();
    TypeOfRoomService typeOfRoomService = new TypeOfRoomService();
    ImageService imageService = new ImageService();
    OrderroomDetailService orderroomDetailService = new OrderroomDetailService();
    HotelDetail hotelDetail = new HotelDetail();
    DiscountdetailService discountdetailService = new DiscountdetailService();

    ShareModel.Hotel hoTel = new ShareModel.Hotel();
    ShareModel.Room room = new ShareModel.Room();
    User user = new User();
    Typeofroom typeofroom = new Typeofroom();
    ShareModel.Orderroom orderroom = new ShareModel.Orderroom();
    List<Discountdetail> discountdetails = new List<Discountdetail>();

    string dayStartFilter;
    string dayEndFilter;
    private string quantity = "1";

    //khai báo biến sử dụng cho checkbox điều khoản dịch vụ
    private InputCheckbox chk;
    private bool isChecked = false;
    private bool disable = true;

    //Tổng tiền đặt phòng
    private double totalPrice = 0;
    private double totalPriceDiscount = 0;
    private double totalDay;

    private string addressHotel = "";
    private string urlImageRoom = "";
    private string torPrice = "0";

    // Hình thức thanh toán
    private int tt = 1;

    //start hub
    private HubConnection hubConnection;
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    Task SendMessage() => hubConnection.SendAsync("SendMessage");
    //end hub

    protected override async Task OnInitializedAsync()
    {
        try{

            var phone =  await sessionStorage.GetItemAsync<string>("customer_phone");
            var room_id =  await sessionStorage.GetItemAsync<string>("room_id");
            room = await roomService.GetRoom(int.Parse(room_id));
            typeofroom = await typeOfRoomService.GetTypeOfRoom(room.TorId);
            hoTel = await hotelService.GetHotel(room.HotelId);
            user = await userService.GetUser(phone);
            addressHotel = hotelService.GetAddressHotel(hoTel.HotelId);
            urlImageRoom = imageService.GetURLImage(room.ImageRooms.FirstOrDefault().ImageId);
            torPrice = typeofroom.TorPrice.ToString();

            dayStartFilter =  await sessionStorage.GetItemAsync<string>("dayStartOrder");
            dayStartFilter = dayStartFilter.Substring(0, dayStartFilter.IndexOf(" "));
            dayEndFilter =  await sessionStorage.GetItemAsync<string>("dayEndOrder");
            dayEndFilter = dayEndFilter.Substring(0, dayEndFilter.IndexOf(" "));
            discountdetails = await discountdetailService.GetAllDiscountdetailActive();
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/HotelBrHub"))
                .Build();
            await hubConnection.StartAsync();
            CalTotalPrice();
            StateHasChanged();
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }

    }
    //Get start of hotel
    protected double GetStartOfHotel(int id)
    {
        return hotelService.GetRateOfHotel(id);
    }
    //Đóng modal
    protected void CancelModal()
    {
        this.DialogService.Close();
    }
    //Đặt phòng
    protected async void BookRoomOrder()
    {
        try
        {
            await sessionStorage.SetItemAsync<string>("room_id", room.RoomId.ToString());
            await sessionStorage.SetItemAsync<string>("customer_phone", user.UserPhone);
            await sessionStorage.SetItemAsync<string>("vnp_Amount", totalPriceDiscount.ToString());
            Payment();

        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }


    }
    // Kiểm tra đã check vào ô "Chính sách"
    protected void CheckTerms()
    {
        disable = isChecked;
        isChecked = !isChecked;
        StateHasChanged();
    }
    private DateOnly FormatDate(string value)
    {
        var index = value.IndexOf("-");
        var lastIndex = value.LastIndexOf("-");
        var dd = int.Parse(value.Substring(lastIndex+1));
        var mm = int.Parse(value.Substring(index+1,2));
        var yyyy = int.Parse(value.Substring(0, index));

        return new DateOnly(yyyy,mm,dd);
    }
    //Get giá sau khi khuyến mãi
    public int GetPriceAfterMinus(Room room)
    {
        int res = 0;
        int percent = 0;
        foreach (var item in discountdetails)
        {
            if(item.RoomId == room.RoomId)
                if (percent <= item.Percent)
                    percent = (int)item.Percent;
        }
        res = (int)room.Tor.TorPrice / 100 * (100 - percent);
        return res;
    }

    //Get tỉ lệ khuyến mãi
    public int GetPercentOfRoom(Room room)
    {
        int percent = 0;
        foreach (var item in discountdetails)
        {
            if(item.RoomId == room.RoomId)
                if (percent <= item.Percent)
                    percent = (int)item.Percent;
        }
        return percent;
    }

    protected void CalTotalPrice()
    {
        totalDay = (DateTime.Parse(dayEndFilter.ToString()) - DateTime.Parse(dayStartFilter.ToString())).TotalDays;
        totalPrice = double.Parse(quantity) * totalDay * (double)typeofroom.TorPrice;
        totalPriceDiscount = totalPrice / 100 * (100 - GetPercentOfRoom(room));
        StateHasChanged();
    }

    private void QuatityChange(string value)
    {
        quantity = value;
        CalTotalPrice();
    }


    //Thanh toán trực tuyền
    bool paying = false;
    public async void Payment()
    {
        Pages.Index index = new Index();
        string url = "https://sandbox.vnpayment.vn/paymentv2/vpcpay.html";
        string returnUrl = @index.UrlPluginFB + "/paymentconfirmofbookroom";
        string tmnCode = "M4SI0GQK";
        string hashSecret = "TEPHMKQSDCNVKDFCAMUICRAJVMMXNQFF";

        PayLib pay = new PayLib();

        pay.AddRequestData("vnp_Version", "2.0.0"); //Phiên bản api mà merchant kết nối. Phiên bản hiện tại là 2.0.0
        pay.AddRequestData("vnp_Command", "pay"); //Mã API sử dụng, mã cho giao dịch thanh toán là 'pay'
        pay.AddRequestData("vnp_TmnCode", tmnCode); //Mã website của merchant trên hệ thống của VNPAY (khi đăng ký tài khoản sẽ có trong mail VNPAY gửi về)
        pay.AddRequestData("vnp_Amount", (totalPriceDiscount*100).ToString()); //số tiền cần thanh toán, công thức: số tiền * 100 - ví dụ 10.000 (mười nghìn đồng) --> 1000000
        pay.AddRequestData("vnp_BankCode", ""); //Mã Ngân hàng thanh toán (tham khảo: https://sandbox.vnpayment.vn/apis/danh-sach-ngan-hang/), có thể để trống, người dùng có thể chọn trên cổng thanh toán VNPAY
        pay.AddRequestData("vnp_CreateDate", DateTime.Now.ToString("yyyyMMddHHmmss")); //ngày thanh toán theo định dạng yyyyMMddHHmmss
        pay.AddRequestData("vnp_CurrCode", "VND"); //Đơn vị tiền tệ sử dụng thanh toán. Hiện tại chỉ hỗ trợ VND
        pay.AddRequestData("vnp_IpAddr", GetIp()); //Địa chỉ IP của khách hàng thực hiện giao dịch
        pay.AddRequestData("vnp_Locale", "vn"); //Ngôn ngữ giao diện hiển thị - Tiếng Việt (vn), Tiếng Anh (en)
        pay.AddRequestData("vnp_OrderInfo", "Thanh toan don hang"); //Thông tin mô tả nội dung thanh toán
        pay.AddRequestData("vnp_OrderType", "other"); //topup: Nạp tiền điện thoại - billpayment: Thanh toán hóa đơn - fashion: Thời trang - other: Thanh toán trực tuyến
        pay.AddRequestData("vnp_ReturnUrl", returnUrl); //URL thông báo kết quả giao dịch khi Khách hàng kết thúc thanh toán
        pay.AddRequestData("vnp_TxnRef", DateTime.Now.Ticks.ToString()); //mã hóa đơn

        string paymentUrl = pay.CreateRequestUrl(url, hashSecret);

        if(paying == false){
            if (tt == 2)
            {
                // 1 là thanh toán tiền khi nhận phòng
                // 2 là thanh toán trực tuyến
                await JS.InvokeVoidAsync("open", paymentUrl, "_self");
                paying = true;
            }
            else if(tt == 1 )
            {
                CancelModal();
                await AddOrderroom();
                if (IsConnected)
                    await SendMessage();
                await DialogService.OpenAsync<BookRoomByMoney>
                (
                    "Đặt phòng thành công",
                       new Dictionary<string, object>() {},
                       new DialogOptions() { ShowTitle = true, Width = "1300px", Height = "400px", Resizable = true, Draggable = true, AutoFocusFirstElement = true }
                );
            }
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Bạn đang thanh toán! Vui lòng đặt lại phòng nếu đã tắt giao diện thanh toán.");
        }

    }
    public string GetIp()
    {
        UserInfo = new UserInfo();
        return UserInfo.IPAddress;
    }


    //Thanh toán trực tuyến

    //Thêm đơn đặt phòng - Thanh toán khi nhận phòng
    public async Task AddOrderroom()
    {
        ShareModel.Orderroom orderroom = new ShareModel.Orderroom();
        OrderroomDetail_Custom orderroomdetail = new OrderroomDetail_Custom();

        orderroom.OrderroomDate = DateTime.Now;
        orderroom.OrderroomDatestart = DateTime.Parse(await sessionStorage.GetItemAsync<string>("dayStartOrder"));
        orderroom.OrderroomDateend = DateTime.Parse(await sessionStorage.GetItemAsync<string>("dayEndOrder"));
        orderroom.OrderroomTotalprice = int.Parse(await sessionStorage.GetItemAsync<string>("vnp_Amount"));
        orderroom.UserPhone = user.UserPhone;
        orderroom.UserPhoneNavigation = user;
        orderroom.OrderroomStatus = "1";//thành công
        var resod = await orderroomService.AddOrderroom(orderroom);
        if(resod != null)
        {
            orderroomdetail.OrderroomId = resod.OrderroomId;
            orderroomdetail.RoomId = room.RoomId;
            var resodd = await orderroomDetailService.AddOrderroomdetail(orderroomdetail);
            if(resodd != null)
            {
                SendMail(orderroom, resodd);
                if (IsConnected)
                    await SendMessage();
            }
        }

    }
    private async void SendMail(Orderroom orderroom, Orderroomdetail orderroomdetail)
    {
        try
        {
            var room = await roomService.GetRoom(orderroomdetail.RoomId);
            using (MailMessage mail = new MailMessage())
            {
                mail.From = new MailAddress("vovannhan2727bc@outlook.com");
                mail.To.Add(user.UserEmail);
                mail.Subject = "Xác nhận đặt phòng";
                mail.Body = "Kính chào khách hàng: " + user.UserName.ToUpper();
                mail.Body += "<p>Chúng tôi xin xác nhận lại thông tin đặt phòng như sau:<p/>";
                mail.Body += "<p>Khách sạn: " + room.Hotel.HotelName + "</p>";
                mail.Body += "<p>Địa chỉ: " + hotelService.GetAddressHotel(room.Hotel.HotelId) + "</p>";
                mail.Body += "<p>Phòng đặt: " + room.RoomName + "</p>";
                mail.Body += "<p>Ngày đặt: " + hotelService.FormatDateVN(orderroom.OrderroomDate.ToString()) + "</p>";
                mail.Body += "<p>Ngày nhận phòng: " + hotelService.FormatDateVN(orderroom.OrderroomDatestart.ToString()) + "</p>";
                mail.Body += "<p>Ngày trả phòng: " + hotelService.FormatDateVN(orderroom.OrderroomDateend.ToString()) + "</p>";
                mail.Body += "<p>Tổng tiền: " + hotelService.FormatVND((int)orderroom.OrderroomTotalprice) + "</p>";
                mail.Body += "<p>Trạng thái thanh toán: Thanh toán khi nhận phòng</p>";

                mail.Body += "<p>Xin cảm chân thành ơn quý khách hàng đã tin tưởng và sử dụng dịch vụ của chúng tôi</p>";

                mail.Body += "<br>Trân trọng,<br>";
                mail.IsBodyHtml = true;

                using (SmtpClient smtp = new SmtpClient("smtp.office365.com", 587))
                {
                    smtp.Credentials = new System.Net.NetworkCredential("vovannhan2727bc@outlook.com", "8vxzX$PS123");
                    smtp.EnableSsl = true;
                    smtp.Send(mail);
                }
            }
        }
        catch (Exception ex)
        {
            throw;
        }

    }
    public async void ShowPolicy()
    {
        await DialogService.OpenAsync<Policy>
        (
             "Chính sách và điều khoản sử dụng",
             new Dictionary<string, object>() {},
             new DialogOptions() { ShowTitle = true, Width = "750px", Height = "200px", Resizable = true, Draggable = true, AutoFocusFirstElement = true }
        );
    }
}
